{"meta":{"title":"Wesukilaye","subtitle":"Your choices please me, for now","description":"熟练使用iOS Objective-c，Swift. 了解Python爬取网络数据,深入研究移动端开发，目前正在学习Flutter","author":"Wesukilaye","url":"https://wesukilayezcy.github.io","root":"/"},"pages":[{"title":"about","date":"2019-08-06T02:52:10.000Z","updated":"2019-08-16T08:53:22.957Z","comments":true,"path":"about/index.html","permalink":"https://wesukilayezcy.github.io/about/index.html","excerpt":"","text":"你陪了我多少年,花开花落,一路上起起跌跌。"},{"title":"categories","date":"2019-08-06T02:57:00.000Z","updated":"2019-08-06T02:57:28.289Z","comments":true,"path":"categories/index.html","permalink":"https://wesukilayezcy.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-08-06T02:48:31.000Z","updated":"2019-08-06T02:53:14.665Z","comments":true,"path":"tags/index.html","permalink":"https://wesukilayezcy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Dart 泛型","slug":"Dart-泛型","date":"2019-08-13T02:15:00.000Z","updated":"2019-08-13T02:37:07.699Z","comments":true,"path":"2019/08/13/Dart-泛型/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/13/Dart-泛型/","excerpt":"优点 适当地指定泛型类型会生成更好的代码。 可以使用泛型来减少代码重复。 泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验) 如泛型数组123var names = List&lt;String&gt;();names.addAll([&apos;Seth&apos;, &apos;Kathy&apos;, &apos;Lars&apos;]);names.add(42); // Error","text":"优点 适当地指定泛型类型会生成更好的代码。 可以使用泛型来减少代码重复。 泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验) 如泛型数组123var names = List();names.addAll(['Seth', 'Kathy', 'Lars']);names.add(42); // Error 泛型方法123456789101112131415 getData(T value){ return value; }void main(){ // print(getData(21)); // print(getData('xxx')); // getData('你好'); print(getData(12));} 泛型接口12345678910111213141516171819202122232425262728293031323334353637abstract class Storage{ Map m = new Map(); void set(String key, T value); void get(String key);}class Cache implements Storage { @override Map m = new Map(); @override void get(String key) { print(m[key]); } @override void set(String key, T value) { print('set successed!'); m[key] = value; }}-----------------------Cache ch = new Cache(); ch.set('name', '123'); // ch.set('name', 1232); // type 'int' is not a subtype of type 'String' of 'value' ch.get('name'); Cache ch2 = new Cache(); // ch2.set('name', '23'); // type 'String' is not a subtype of type 'Map' of 'value' ch2.set('ptbird', {'name': 'pt', 'age': 20}); ch2.get('ptbird');-------------------结果：set successed!123set successed!{name: pt, age: 20}","categories":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/categories/Dart/"}],"tags":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/tags/Dart/"},{"name":"泛型","slug":"泛型","permalink":"https://wesukilayezcy.github.io/tags/泛型/"}],"author":"Mr.Zhao"},{"title":"Dart 函数","slug":"Dart-函数","date":"2019-08-13T01:26:00.000Z","updated":"2019-08-13T01:51:16.744Z","comments":true,"path":"2019/08/13/Dart-函数/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/13/Dart-函数/","excerpt":"定义无返回值无参数1234567function_name() &#123; //statements &#125;或者void function_name() &#123; //statements &#125;","text":"定义无返回值无参数1234567function_name() { //statements }或者void function_name() { //statements } 无返回值有参数1234test_param(int n1,String s1) { print(n1); print(s1); } 有返回值无参数1234String test() { // function definition return \"hello world\"; } 可选参数可选的位置参数要指定可选的位置参数，请使用方括号[ ] 123456789void main() { test_param(123); } test_param(n1,[s1]) { print(n1); print(s1); }//123 //null 可选的命名参数与位置参数不同，必须在传递值时指定参数名称。花括号{}可用于指定可选的命名参数。 123456789void main() { test_param(123); test_param(123,s1:'hello'); test_param(123,s2:'hello',s1:'world'); } test_param(n1,{s1,s2}) { print(n1); print(s1); } 带有默认值的可选参数默认情况下，还可以为函数参数指定值。 但是，这些参数也可以显式传递值。 1234567void main() { test_param(123); } void test_param(n1,{s1:12}) { print(n1); print(s1); } //123 12 箭头函数箭头函数只能有一行，可以省略大括号，在箭头(=>)和分号(;)之间只能出现表达式(而不是语句)。 1234567List l1 = [1, 2]; l1.forEach((item) { print(item); }); l1.forEach((item) => print(item)); 立即执行函数1234// 立即执行方法 ((name) { print('my name is ${name}'); })('postbird'); 闭包1234567891011121314// 闭包 Function getA() { int a = 0; return () { a++; print(a); }; } Function b = getA(); b(); b(); //输出1 2","categories":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/categories/Dart/"}],"tags":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/tags/Dart/"},{"name":"函数","slug":"函数","permalink":"https://wesukilayezcy.github.io/tags/函数/"}],"author":"Mr.Zhao"},{"title":"Dart map","slug":"Dart-map-1","date":"2019-08-12T10:00:00.000Z","updated":"2019-08-13T01:23:27.519Z","comments":true,"path":"2019/08/12/Dart-map-1/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/12/Dart-map-1/","excerpt":"定义不指定泛型12345678910111213 var map1 = &#123;&apos;aa&apos;:&apos;aaa&apos;,&apos;bb&apos;:22,&apos;cc&apos;:true&#125;;//直接赋初始值 //print(map1);//&#123;aa: aaa, bb: 22, cc: true&#125; Map map3 = &#123;&quot;a&quot;:&quot;a1&quot;,&quot;b&quot;:&quot;b1&quot;&#125;;//直接赋初始值 //print(map3);//&#123;a: a1, b: b1&#125; var map2 = new Map(); map2[&apos;dd&apos;]=3.3; map2[2] = &apos;ddd22&apos;;//print(map2);//&#123;dd: 3.3, 2: ddd22&#125;//print(map2[3]);//null 如果不存在，则是null map2[3]= null;//key存在 value存在 value的值为null//print(map2.length);//3 长度","text":"定义不指定泛型12345678910111213 var map1 = {'aa':'aaa','bb':22,'cc':true};//直接赋初始值 //print(map1);//{aa: aaa, bb: 22, cc: true} Map map3 = {\"a\":\"a1\",\"b\":\"b1\"};//直接赋初始值 //print(map3);//{a: a1, b: b1} var map2 = new Map(); map2['dd']=3.3; map2[2] = 'ddd22';//print(map2);//{dd: 3.3, 2: ddd22}//print(map2[3]);//null 如果不存在，则是null map2[3]= null;//key存在 value存在 value的值为null//print(map2.length);//3 长度 指定泛型1234567var map1 = {}; Map map2 = new Map(); map2[1]=\"a\"; map2[2] = \"b\";//print(map2);//{1: a, 2: b} Map map3 = {\"a\":1,\"b\":2};//print(map3);//{a: 1, b: 2} 属性12345678Map map6 = {\"a\":1,\"b\":2};//print(map6.length);//2 长度//print(map6.isNotEmpty);//true 是否不为空//print(map6.isEmpty);//false 是否为空//print(map6.keys);//(a, b) key的集合//print(map6.values);//(1, 2) value的集合//print(map6.entries);//(MapEntry(a: 1), MapEntry(b: 2)) map迭代的键值对集合 方法增加1234 Map map7 = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}; //新增一个key value map7[\"f\"] = 6;//新增一个不存在的key//print(map7);//{a: 1, b: 2, c: 3, d: 4, e: 5, f: 6} 修改直接修改123Map map8 = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}; map8[\"a\"] = 11; //print(map8);//{a: 11, b: 2, c: 3, d: 4, e: 5} update() 对指定的key的value做出修改12345678 Map map = {\"a\":1,\"b\":2,\"c\":3}; int result3 = map.update(\"a\", (value)=>(value*2));//key存在 根据参数函数修改其值//print(result3);//2//print(map);//{a: 2, b: 2, c: 3}//int result4 = map.update(\"d\", (value)=>(value*2));//key不存在 报错 int result4 = map.update(\"d\", (value)=>(value*2),ifAbsent: ()=>(10));//key不存在 但有ifAbsent参数 返回ifAbsent函数的值 并添加到map中//print(result4);//10//print(map23);//{a: 2, b: 2, c: 3, d: 10} updateAll() 根据参数函数的规则，批量修改map 12345678910111213 Map map = {\"a\":1,\"b\":2,\"c\":3}; map.updateAll((String key,int value){ return value*2; });// //print(map);//{a: 2, b: 4, c: 6} Map map2 = {\"a\":1,\"b\":2,\"c\":3}; map2.updateAll((String key,int value){ if(key==\"a\"){return 10;} if(key==\"b\"){return 20;} return value*2; });////print(map2);//{a: 10, b: 20, c: 6} 删除remove() 删除一个key 123Map map = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5};map.remove(\"b\");//print(map);//{a: 11, c: 3, d: 4, e: 5} removeWhere() 根据条件批量删除 123Map map = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}; map.removeWhere((key,value)=>(value>3));//删除掉 符合参数函数的keyvalue对 //print(map);//{a: 1, b: 2, c: 3} 包含containsKey() 是否包含key 123Map map = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5};//print(map.containsKey(\"a\"));//true 是否包含key//print(map.containsKey(\"aa\"));//false 是否包含key containsValue() 是否包含value值 123 Map map = {\"a\":1,\"b\":2,\"c\":3};//print(map.containsValue(1));//true//print(map.containsValue(4));//false 遍历 123456789 Map map = {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}; map.forEach((String key,int value){ print(\"$key $value\");//a 1//b 2//c 3//d 4//e 5 }); 合并addAll() 整体合并另一个map 泛型要一致 12345Map map = {\"a\":1,\"b\":2,\"c\":3}; Map other = {\"a\":1,\"c\":4,\"d\":7}; map.addAll(other);//key相同时value值后者覆盖前者，前者不存在时则添加进来//print(map);//{a: 1, b: 2, c: 4, d: 7} addEntries() 合并两个map 如果key有重复，被合并的map的value覆盖前者 1234 Map map = {\"a\":1,\"b\":2,\"c\":3}; Map map1 = {\"a\":1,\"b\":4,\"d\":3,\"e\":5}; map.addEntries(map1.entries);//print(map);//{a: 1, b: 4, c: 3, d: 3, e: 5}","categories":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/categories/Dart/"}],"tags":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/tags/Dart/"},{"name":"字典","slug":"字典","permalink":"https://wesukilayezcy.github.io/tags/字典/"},{"name":"Map","slug":"Map","permalink":"https://wesukilayezcy.github.io/tags/Map/"}],"author":"Mr.Zhao"},{"title":"Dart list","slug":"Dart-数值类型","date":"2019-08-08T08:05:00.000Z","updated":"2019-08-08T09:12:42.249Z","comments":true,"path":"2019/08/08/Dart-数值类型/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/08/Dart-数值类型/","excerpt":"定义123456789var list1 = List();// 不限定长度，不限定类型，可添加任意类型的数据 List list2 = List();// 不限定长度，不限定类型，可添加任意类型的数据 List list3 = List(2);//限定了长度为2 越界会报错，不限定类型，可添加任意类型的数据var list4 = [1,2,3];//初始就赋值了，限定了长度，限定了类型，只能是int var list5 = [2,&apos;3&apos;,true];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换 List list6 = [&apos;a&apos;,2,&apos;b&apos;,false];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换 var list7 = &lt;String&gt;[&quot;a&quot;,&quot;b&quot;];//String类型 List&lt;String&gt; list8 = [&apos;a&apos;,&apos;b&apos;,&apos;3&apos;]; List&lt;String&gt; list9 = new List(2);","text":"定义123456789var list1 = List();// 不限定长度，不限定类型，可添加任意类型的数据 List list2 = List();// 不限定长度，不限定类型，可添加任意类型的数据 List list3 = List(2);//限定了长度为2 越界会报错，不限定类型，可添加任意类型的数据var list4 = [1,2,3];//初始就赋值了，限定了长度，限定了类型，只能是int var list5 = [2,'3',true];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换 List list6 = ['a',2,'b',false];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换 var list7 = [\"a\",\"b\"];//String类型 List list8 = ['a','b','3']; List list9 = new List(2); 常用属性12345678910List list10 = List(); list10.add('aaa'); list10.add('bbb'); list10.add('ccc'); print(list10.length);//3 长度 print(list10.isEmpty);//false 是否为空 print(list10.isNotEmpty);//true 是否不为空 print(list10.reversed);//(ccc, bbb, aaa) 返回一个List的倒序排列的Iterable 不改变原List print(list10.first);//aaa 第一个元素 print(list10.last);//ccc 最后一个元素 常用方法 add() 添加一个元素到List末尾 addAll() 两个List合并 12345678 List list10 = List();list10.add('aaa');list10.add('bbb');List list11 = List();list11.add('ccc');list11.add('ddd');list11.addAll(list10);print(list11);//[ccc, ddd, aaa, bbb] 插入 insert(index,element) 在指定index处插入某个值 12345678List list12 = List();list12.add(0);list12.add(1);list12.add(2);list12.add(3);print(list12);//[0, 1, 2, 3]list12.insert(1, 5); //指定索引位置 插入值，其余顺延print(list12);// [0, 5, 1, 2, 3] insertAll(index,list) 在指定index处插入list 删除 remove(obj) 删除具体的元素 removeAt(index) 删除索引位置元素 removeLast()删除末尾元素 removeRange(start,end) 范围删除 removeWhere() 根据条件删除 clear() 清空数组 setRange(startIndex,endIndex,list) 范围修改List的值 123456789101112131415 List list13 = List(); list13.add('aaa'); list13.add('bbb'); list13.add('ccc'); list13.add('ddd');// print(list13);// [aaa, bbb, ccc, ddd] List list14 = List(); list14.add(\"111\"); list14.add(\"222\"); list14.add(\"333\"); list14.add(\"444\"); list14.add(\"555\"); list14.add(\"666\"); list13.setRange(0,3, list14);//范围修改，从list14取出0 1 2位置的值，修改list13对应0 1 2位置的值，0-3含头不含尾，start和end相同，则不变。start和end任何一个超出list13 list14的角标 则报错。//print(list13);//[111, 222, ccc, ddd] replaceRange(start,end,list)范围替换 含头不含尾 12345678List list20 = List();list20.add(0);list20.add(1);list20.add(2);list20.add(3);print(list20);//[0, 1, 2, 3]list20.replaceRange(1, 3, [5,6,7,8]);//范围替换 含头不含尾print(list27);//[0, 5, 6, 7, 8, 3] retainWhere(()=>(bool)) 根据条件筛选元素 12345678 List list20 = List(); list20.add(0); list20.add(1); list20.add(2); list20.add(3); print(list20);//[0, 1, 2, 3] list20.retainWhere((element)=>(element>2)); //根据条件保留住元素//print(list20);//[3, 4] firstWhere((element)=>(bool)) 返回第一个满足条件的元素（不是元素的index） 1234567 List list21 = [1, 2, 3, 4, 5]; int result = list21.firstWhere((element)=>(element>2));//返回满足条件的第一个元素 //int result1 = list21.firstWhere((element)=>(element>44));//返回满足条件的第一个元素，不满足 报错 int result2 = list21.firstWhere((element)=>(element>44),orElse: ()=>(10));//返回满足条件的第一个元素，不满足 返回orElse方法的返回值//print(result7);//3//print(result8);//报错//print(result9);//10 forEach() List遍历每个元素 1234567891011121314 List list22 = [3, 4, 1, 2, 5]; list22.forEach((element){ //遍历每个元素 此时不可add或remove 否则报错 但可以修改元素值， element += 1;//print(element);//依次输出：4 5 2 3 6 list22[3]=0;//直接修改list对应index的值 list22[0]=0; });//print(list22);// [0, 4, 1, 0, 5]//for List遍历每个元素 for(var x in list22){ print(x);//0 4 1 0 5 } map() 遍历现有List的每个元素，并做处理，返回一个新的Iterable 12345 List list23 = [3, 4, 1, 2, 5]; Iterable result1 = list23.map((e)=>(e>2?\"a\":\"b\"));//用指定方法对每个元素做操作，将结果组成一个新的Iterable//print(result1);//(a, a, b, b, a) Iterable result2 = list23.map((e)=>(e>2));//print(result2);//(true, true, false, false, true) reduce((a,b)=>(某种操作)) 用指定的方法对元素做连续操作，将结果返回 12345List list24 = [3, 4, 1, 2, 5]; int result1 = list24.reduce((a,b)=>(a+b));//3+4+1+2+5 用指定的方法对元素做连续操作，将结果返回//print(result1);//15 int result2 = list24.reduce((a,b)=>(a*b));//3*4*1*2*5 用指定的方法对元素做连续操作，将结果返回//print(result2);//120 toSet() 将List转为Set 去除后面重复的元素 123List list25 = [3, 4, 1, 2, 5,2,3,6];Set result1 = list25.toSet();//将list转为set,将后面重复的都去掉//print(result1);//{3, 4, 1, 2, 5, 6} asMap() 将list转为map 123456789 List list26 = List(); list26.add(\"aaa\"); list26.add(\"bbb\"); list26.add(\"ccc\"); list26.add(\"ddd\"); list26.add(\"eee\");//print(list26);// [aaa, bbb, ccc, ddd, eee] Map map = list26.asMap();//list转为map key为index value为list的值//print(map);//{0: aaa, 1: bbb, 2: ccc, 3: ddd, 4: eee} join(“-“) 用指定的字符将List中每个元素都连接起来，返回一个字符串 123 List list27 = [3, 4, 1, 2, 5]; String result1 = list27.join(\"-\");//用指定的字符将每个元素都连接起来，返回一个字符串//print(result1);//3-4-1-2-5","categories":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/categories/Dart/"}],"tags":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/tags/Dart/"},{"name":"list","slug":"list","permalink":"https://wesukilayezcy.github.io/tags/list/"}],"author":"Mr.Zhao"},{"title":"Dart 字符串","slug":"Dart-字符串","date":"2019-08-08T07:44:00.000Z","updated":"2019-08-08T09:12:53.149Z","comments":true,"path":"2019/08/08/Dart-字符串/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/08/Dart-字符串/","excerpt":"定义+拼接单引号或者双引号的创建与拼接12345678910111213141516171819202122String a = &apos;abc&apos;;String b = &quot;abc&quot;;//相邻字符串创建var c = &apos;hello&apos; + &apos; &apos; + &apos;world&apos;;var b = &apos;hello&apos;&apos; &apos;&apos;world&apos;;var d = &apos;hello&apos; &apos; &apos; &apos;world&apos;;var e = &apos;hello&apos;&apos; &apos;&apos;world&apos;;var f = &apos;&apos;&apos;hello worldthis is multi line&apos;&apos;&apos;;var g = &quot;&quot;&quot;hello worldthis is multi line&quot;&quot;&quot;;var h = &apos;hello&apos;&apos;,world&apos;&quot;,OK&quot;;","text":"定义+拼接单引号或者双引号的创建与拼接12345678910111213141516171819202122String a = 'abc';String b = \"abc\";//相邻字符串创建var c = 'hello' + ' ' + 'world';var b = 'hello'' ''world';var d = 'hello' ' ' 'world';var e = 'hello'' ''world';var f = '''hello worldthis is multi line''';var g = \"\"\"hello worldthis is multi line\"\"\";var h = 'hello'',world'\",OK\"; 转义字符12345var s1 = 'In a raw string, not even \\n gets \\t special treatment.';print(s1);//结果In a raw string, not even gets special treatment. 加r，可以识别转义字符 1234var s = r'In a raw string, not even \\n gets \\t special treatment.'; print(s);In a raw string, not even \\n gets \\t special treatment. 搜索12345var a = 'hello world';print(a.contains('wo')); //trueprint(a.startsWith('h')); //true print(a.endsWith('d')); //trueprint(a.indexOf('llo')); //2 提取数据12var a = 'hello world';var b = a.split(' '); 大小写转换12print(a.toLowerCase());print(a.toUpperCase()); 替换1print('hello world world!'.replaceAll('world', 'abc'));","categories":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/categories/Dart/"}],"tags":[{"name":"Dart","slug":"Dart","permalink":"https://wesukilayezcy.github.io/tags/Dart/"},{"name":"String","slug":"String","permalink":"https://wesukilayezcy.github.io/tags/String/"}],"author":"Mr.Zhao"},{"title":"Swift 字典","slug":"Swift-字典","date":"2019-08-05T09:24:00.000Z","updated":"2019-08-06T13:59:59.435Z","comments":true,"path":"2019/08/05/Swift-字典/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-字典/","excerpt":"定义字典常量1234567//Swift中用[] //[String : Any] let dic = [&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18] as [String : Any] print(dic) //定义字典的数组 let array:[[String:Any]] =[[&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18],[&quot;name&quot;:&quot;li&quot;,&quot;age&quot;:180]] print(array)","text":"定义字典常量1234567//Swift中用[] //[String : Any] let dic = [\"name\":\"zhang\",\"age\":18] as [String : Any] print(dic) //定义字典的数组 let array:[[String:Any]] =[[\"name\":\"zhang\",\"age\":18],[\"name\":\"li\",\"age\":180]] print(array) 变量123var dictionary: [String:Int] = [:]var dictionary1 = [\"key1\": 55, \"key2\": 555]var dictionary2 = Dictionary() 字典增删改12//可变var 不可变let var dic = [\"name\":\"zhang\",\"age\":18] as [String : Any] 增12345//增dic[\"title\"] = \"大哥\"print(dic)// 如果key不存在，则添加新元素dic.updateValue(\"XXX\", forKey: \"number\") 改12345//修改 通过key修改，key是唯一的dic[\"name\"] = \"大西瓜\"print(dic)// 如果key存在，则修改valuedic.updateValue(\"XXX\", forKey: \"name\") 删除123456//删除 -直接给定key//字典通过key来定位置，key必须是可以”hash 哈希“MD5一种//hash就是将字符串变成唯一的”整数“,便于查找，提高字典遍历的速度dic.removeAll() // 删除所有元素dic.removeValue(forKey: \"age\")print(dic) 字典遍历12345678let dic = [\"name\":\"zhang\",\"age\":18,\"title\":\"老板\"] as [String : Any] for e in dic { print(\"\\(e.key) \\(e.value)\") } for (key,value) in dic { print(\"\\(key) \\(value)\") } 字典合并12345678910var dic = [\"name\":\"zhang\",\"age\":18,\"title\":\"老板\"] as [String : Any]let dic1 = [\"name\":\"大瓜\",\"height\":1.9] as [String : Any] //字典不能直接相加 //思路，遍历dic1依次设置 //如果key存在,会修改 //如果key不存在，会新增! for e in dic1 { dic[e.key] = dic1[e.key] } print(dic)","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"字典","slug":"字典","permalink":"https://wesukilayezcy.github.io/tags/字典/"}],"author":"Mr.Zhao"},{"title":"Swift 数组","slug":"Swift-数组","date":"2019-08-05T08:58:00.000Z","updated":"2019-08-06T09:02:00.304Z","comments":true,"path":"2019/08/05/Swift-数组/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-数组/","excerpt":"定义数组12345678910111213141516171819202122232425262728293031func definitionArr()-&gt;()&#123; var arr:[Any] = []//空 任意类型 var arr1:[String] = []//空 只能存字符串 var arr2:[Any] = [&quot;1&quot;,1] var arr4:[Dictionary] = [] //自动推导的结果[String] -&gt;表示数组中存储的是string let array = [&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;] print(array) //[Int]-&gt;表示数组中存储的是int let array2 = [1,2,3,4,5] print(array2) let p = CGPoint(x: 10, y: 300) let array3 = [p] print(array3) //混合数组:几乎不用 //如果类型不一致，自动推导结果为NSObject let array4 = [&quot;张三&quot;,1,p] as [Any] print(array4) //定义一个数组，指定类型是int var array5 = [Int]() for i in 0...8 &#123; array5.append(i) print(&quot;\\(array5) \\(array5.capacity)&quot;) &#125; &#125;","text":"定义数组12345678910111213141516171819202122232425262728293031func definitionArr()->(){ var arr:[Any] = []//空 任意类型 var arr1:[String] = []//空 只能存字符串 var arr2:[Any] = [\"1\",1] var arr4:[Dictionary] = [] //自动推导的结果[String] ->表示数组中存储的是string let array = [\"张三\",\"李四\",\"王五\"] print(array) //[Int]->表示数组中存储的是int let array2 = [1,2,3,4,5] print(array2) let p = CGPoint(x: 10, y: 300) let array3 = [p] print(array3) //混合数组:几乎不用 //如果类型不一致，自动推导结果为NSObject let array4 = [\"张三\",1,p] as [Any] print(array4) //定义一个数组，指定类型是int var array5 = [Int]() for i in 0...8 { array5.append(i) print(\"\\(array5) \\(array5.capacity)\") } } 数组遍历1234567891011121314151617181920212223242526272829303132333435// MARK:数组的遍历 func demo1() { let array = [\"张三\",\"李四\",\"王五\"] //1.按照下标遍历 print(\"按照下标遍历\") for i in 0.. () { let arr1 = [\"今\",\"天\",\"是\",\"个\",\"好\",\"日\",\"子\"] var arr = [\"今\",\"天\",\"是\",\"个\",\"好\",\"日\",\"子\",\"A\",\"b\"] //添加数组 arr.append(contentsOf: arr1) //print(arr)} 删除123456789101112131415161718func remove() -> () { var arr = [\"今\",\"天\",\"是\",\"个\",\"好\",\"日\",\"子\",\"A\",\"b\"] //删除指定index的元素 //arr.remove(at: 2) //删除最后的一个元素 //arr.removeLast() //删除最前的一个元素 //arr.removeFirst() //单侧删除 //arr.removeFirst(3) //单侧删除 //arr.removeLast(3) //删除所有的元素 //arr.removeAll() //是否保留arr的空间 arr.removeAll(keepingCapacity: true) print(arr)} 插入123456func insertElement() -> () { var arr = [\"今\",\"天\",\"是\",\"个\",\"好\",\"日\",\"子\",\"A\",\"b\"] //插入数据 arr.insert(\"1\", at: 0) //print(arr)} 修改1234// 这里是var变量， 不能是常量var array1 = [1, 2, 3, 4, 5]// 这样子就修改了第一个元素array1[0] = 9 数组合并1234567891011// MARK:数组合并 func demo3() { //[String] var array = [\"张三\",\"李四\",\"王五\"] var array = [\"张三\",\"李四\",\"王五\"] as [Any] //[Any] let array2 = [\"老刀\",\"1\",\"2\",180] as [Any] //合并 //注意：合并的两个类型必须一致 array += array2 print(array) } 数组去重12345678910111213141516171819202122232425262728293031323334353637383940414243444546func arrRemovingWeight() -> () { //数组去重 #if false //方法1 原理：字典中key是唯一的 let array = [111, 222, 111] var dictInts = Dictionary() for number in array { dictInts[String(number)] = number } var result = [Int]() for value in dictInts.values { result.append(value) } print(result) #endif #if false //方法2 let arr = [\"1\",\"2\",\"3\",\"4\",\"3\"] var arr1:[String] = [] for item in arr { if !arr1.contains(item){ arr1.append(item) } } print(arr1) #endif //数组合并 只要不同的和只要相同的只需要在if的位置加判断即可 let arr = [\"1\",\"2\",\"3\",\"4\"] var arr1 = [\"1\",\"2\",\"4\",\"8\"] for item in arr { if !arr1.contains(item){ arr1.append(item) } } print(arr1) //判断数组是否为空 if arr1.isEmpty { } }","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"数组","slug":"数组","permalink":"https://wesukilayezcy.github.io/tags/数组/"}],"author":"Mr.Zhao"},{"title":"Swift String","slug":"Swift-String","date":"2019-08-05T01:50:00.000Z","updated":"2019-08-07T01:40:02.680Z","comments":true,"path":"2019/08/05/Swift-String/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-String/","excerpt":"字符串的子串12345678910111213141516171819// MARK:字符串的子串 func demo4() &#123; //建议：一般使用NSString作为中转，因为swift取字串方法一直在优化 let str = &quot;我们一起去飞&quot; let ocStr = str as NSString let s1 = ocStr.substring(with: NSMakeRange(2, 3)) print(s1) print(str.startIndex) print(str.endIndex) guard let range=str.range(of: &quot;一起&quot;) else &#123; print(&quot;没有找到字符串&quot;) return &#125; print(range) &#125;","text":"字符串的子串12345678910111213141516171819// MARK:字符串的子串 func demo4() { //建议：一般使用NSString作为中转，因为swift取字串方法一直在优化 let str = \"我们一起去飞\" let ocStr = str as NSString let s1 = ocStr.substring(with: NSMakeRange(2, 3)) print(s1) print(str.startIndex) print(str.endIndex) guard let range=str.range(of: \"一起\") else { print(\"没有找到字符串\") return } print(range) } 格式化 12345678910111213// MARK:格式化func demo3() { let h = 8 let m = 9 let s = 6 let dateStr = \"\\(h):\\(m):\\(s)\" print(dateStr) //使用格式字符串格式化 let dateStr1 = String(format: \"%02d:%02d:%02d\", h,m,s) print(dateStr1) } 字符串的拼接 123456789101112131415161718// MARK:字符串拼接func demo2() { let str1 = \"hello \" let str2 = \"word\" var str = \"\" str = str1 + str2 let name = \"老王\" let age = 18 let title:String? = \"BOSS\" let point = CGPoint(x: 100, y: 200) // \\(变量/常量) let str1 = \"\\(name) \\(age) \\(title ?? \"\") \\(point)\" print(str) } 字符串的长度 123456789101112131415// MARK:字符串的长度func demo1() { let str = \"hello world你好\" //返回指定编码的对应的字节数量 //UTF-8的编码（0~4个），每个汉字是3个字节 print(str.lengthOfBytes(using: .utf8)) //字符串长度 -返回字符的个数 print(str.count) //使用NSString中转 /** 值 as 类型 */ let ocStr = str as NSString print(ocStr.length)} 字符串的遍历 12345678// MARK:字符串的遍历func demo() { let str = \"我要飞得更高\" for c in str { print(c) } } 字符串的插入和删除 1234567//字符串插入var welcome = \"hello\" welcome.insert(\"!\", at: welcome.endIndex)//插入一个字符 print(\"insertNewCharacters:\\(welcome)\\n\");//打印insertNewCharacters:hello! //字符串删除 welcome.remove(at: welcome.index(before: welcome.endIndex))//删除最后一个字符 print(\"removeStrLastCharacters:\\(welcome)\\n\")//打印 removeStrLastCharacters:hello word","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"String","slug":"String","permalink":"https://wesukilayezcy.github.io/tags/String/"}],"author":"Mr.Zhao"},{"title":"Swift for循环","slug":"Swift-for循环","date":"2019-08-05T01:48:00.000Z","updated":"2019-08-06T09:02:35.923Z","comments":true,"path":"2019/08/05/Swift-for循环/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-for循环/","excerpt":"for循环12345678910111213141516171819202122232425/** swift对语法要求极其严格，尤其空格 *///反序遍历func demo1() &#123; for i in (0..&lt;10).reversed() &#123; print(i) &#125;&#125;func demo ()&#123; for i in 0..&lt;5 &#123; print(i) &#125; print(&quot;-------&quot;) for i in 0...5 &#123; print(i) &#125; print(&quot;-------&quot;) let r1 = 0..&lt;5 print(r1) let r2 = 0...5 print(r2) &#125;","text":"for循环12345678910111213141516171819202122232425/** swift对语法要求极其严格，尤其空格 *///反序遍历func demo1() { for i in (0..","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"for循环","slug":"for循环","permalink":"https://wesukilayezcy.github.io/tags/for循环/"}],"author":"Mr.Zhao"},{"title":"Swift switch","slug":"Swift-switch","date":"2019-08-05T01:46:00.000Z","updated":"2019-08-06T09:02:49.674Z","comments":true,"path":"2019/08/05/Swift-switch/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-switch/","excerpt":"switch1234567891011121314/** switch 可以对任意类型的值进行分支，不再局限于整数 switch 一般不需要break 如果要多值，使用‘,’ 所有分支至少需要一条指令,如果什么都不干，才使用break */ func demo(num:Double)&#123; switch num &#123; case 10,9: print(&quot;优&quot;) default: print(&quot;一般&quot;) &#125;","text":"switch1234567891011121314/** switch 可以对任意类型的值进行分支，不再局限于整数 switch 一般不需要break 如果要多值，使用‘,’ 所有分支至少需要一条指令,如果什么都不干，才使用break */ func demo(num:Double){ switch num { case 10,9: print(\"优\") default: print(\"一般\") }","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"switch","slug":"switch","permalink":"https://wesukilayezcy.github.io/tags/switch/"}],"author":"Mr.Zhao"},{"title":"Swift 逻辑分支","slug":"Swift-逻辑分支","date":"2019-08-05T01:41:00.000Z","updated":"2019-08-06T09:03:02.461Z","comments":true,"path":"2019/08/05/Swift-逻辑分支/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-逻辑分支/","excerpt":"逻辑分支12345678910111213141516171819202122232425// MARK:-三目 func demo1() &#123; let x = 3 //三目的语法和OC一样 x &gt; 5 ? print(&quot;大了&quot;):print(&quot;小了&quot;) //分享 有印象就行 //&apos;()&apos;表示空执行 x &gt; 5 ? print(&quot;大了&quot;):() &#125; func demo()&#123; let x = 10 /** 1.条件不需要（） 2.语句必须有&#123;&#125; */ if x &gt; 5 &#123; print(&quot;大了&quot;) &#125;else&#123; //Will never be executed //永远不会执行 -编译器编译的时候会做语法检查 print(&quot;小了&quot;) &#125; &#125;","text":"逻辑分支12345678910111213141516171819202122232425// MARK:-三目 func demo1() { let x = 3 //三目的语法和OC一样 x > 5 ? print(\"大了\"):print(\"小了\") //分享 有印象就行 //'()'表示空执行 x > 5 ? print(\"大了\"):() } func demo(){ let x = 10 /** 1.条件不需要（） 2.语句必须有{} */ if x > 5 { print(\"大了\") }else{ //Will never be executed //永远不会执行 -编译器编译的时候会做语法检查 print(\"小了\") } }","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"三目","slug":"三目","permalink":"https://wesukilayezcy.github.io/tags/三目/"}],"author":"Mr.Zhao"},{"title":"Swift 可选项","slug":"Swift-可选项","date":"2019-08-05T01:32:00.000Z","updated":"2019-08-06T09:03:17.564Z","comments":true,"path":"2019/08/05/Swift-可选项/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-可选项/","excerpt":"可选项的定义与简单使用1234567891011121314151617181920212223242526272829303132333435363738/** 定义 可选项使用？ 解包使用！，准备计算 */ func demo1() &#123; //定义y，没有初始化 let y:Int? //给常量设置数值，初始化的工作能做一次 y = 20 //再次修改常量会报错 //y = 30 print(y) // *** var 的可选值为nil // *** let 的可选值没有默认值 var x:Int? x=10 x=100 print(x) &#125; func demo()&#123; //1.原始的可选项定义 //none:没有值，或者some某一类值 let x:Optional = 10 print(x) //2.简单定义 //&apos;?&apos;用来定义y是一个可选的Int类型，可能没有值，也有可能是个整数 let y:Int? = 20 print(y) //不同类型之间的值不能直接运算！如果没有值，是nil。nil不是任何数据类型,不能参与计算 //print(x+y) // &apos;!&apos;强行解包 -从可选值中强行获取对应的非空值 //程序员必须为每一个！负责 //程序中要少用！ print(x!+y!) &#125;","text":"可选项的定义与简单使用1234567891011121314151617181920212223242526272829303132333435363738/** 定义 可选项使用？ 解包使用！，准备计算 */ func demo1() { //定义y，没有初始化 let y:Int? //给常量设置数值，初始化的工作能做一次 y = 20 //再次修改常量会报错 //y = 30 print(y) // *** var 的可选值为nil // *** let 的可选值没有默认值 var x:Int? x=10 x=100 print(x) } func demo(){ //1.原始的可选项定义 //none:没有值，或者some某一类值 let x:Optional = 10 print(x) //2.简单定义 //'?'用来定义y是一个可选的Int类型，可能没有值，也有可能是个整数 let y:Int? = 20 print(y) //不同类型之间的值不能直接运算！如果没有值，是nil。nil不是任何数据类型,不能参与计算 //print(x+y) // '!'强行解包 -从可选值中强行获取对应的非空值 //程序员必须为每一个！负责 //程序中要少用！ print(x!+y!) } 可选项的判断 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475 func demo4(name:String?,age:Int?) { if let name = name,let age = age { //非空的name age仅在{}有效 print(name + String(age)) } //guard let和if let的技巧 //使用同名的变量接受值，在后续使用的都是非空值，不需要解包 //可以避免起名字的烦恼 guard let name = name,let age = age else { print(\"姓名或年龄为nil\") return } print(name + String(age)) } // MARK:-guard 守卫/守护 //guard let和iflet 刚好相反 func demo3() { let oName:String? = \"老王\" let oAge:Int? = 10 //guard let守护一定有值，如果没有直接返回 guard let name = oName,let age = oAge else { print(\"姓名或年龄为nil\") return } //代码运行至此，一定有值 //通常判断是否有值后，会做具体的逻辑实现 通常代码多 //如果使用if let 凭空多了一层分支，guard是降低分支层次的方法 print(name + String(age)) } // MARK: -if let /var 连用语法，目的就是判断值 func demo2() { let oName:String? = \"老王\" let oAge:Int? = 30 if oName != nil && oAge != nil{ print(oName! + String(oAge!)) } //if let 连用，判断对象的值是否为nil,{}内一定有值，不需要解包 //if var 连用， {}可以対值进行修改 if var name = oName, let age = oAge { name = \"老李\" //进入分支后,name和age有值，不需要解包 //name age作用域仅在{} print(name + String(age)) } } // MARK: -?? func demo1(x:Int?,y:Int?) { /** ??是一个简单的三目 -如果有值，使用值 -如果没有值，使用？？后的值替代 */ print((x ?? 0)+(y ?? 0)) let name:String? = \"老王\" print((name ?? \"\")+\"你好\") // ?? 操作符的优先级低，在使用的时候，最好用（）包一下 print(name ?? \"\"+\"你好\") } func demo(x:Int?,y:Int?){ //1.强行解包有风险// print(x! + y!) //2.使用if判断 //但是 if x != nil && y != nil { print(x!+y!) }else{ print(\"x或者y为nil\") } }","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"},{"name":"if let","slug":"if-let","permalink":"https://wesukilayezcy.github.io/tags/if-let/"},{"name":"guard let","slug":"guard-let","permalink":"https://wesukilayezcy.github.io/tags/guard-let/"}],"author":"Mr.Zhao"},{"title":"Swift 变量与常量","slug":"Swift-变量与常量","date":"2019-08-05T01:27:00.000Z","updated":"2019-08-06T09:04:22.835Z","comments":true,"path":"2019/08/05/Swift-变量与常量/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/Swift-变量与常量/","excerpt":"变量与常量1234567891011121314class ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() demo2() &#125; //关于var和let的选择 //不可变的更安全，开发的时候，通常都先使用let，在需要变化的时候，再改成var func demo3() &#123; let v = UIView() //仅仅修改v的属性，并没有修改v的指针地址 v.backgroundColor = UIColor.red &#125;","text":"变量与常量1234567891011121314class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() demo2() } //关于var和let的选择 //不可变的更安全，开发的时候，通常都先使用let，在需要变化的时候，再改成var func demo3() { let v = UIView() //仅仅修改v的属性，并没有修改v的指针地址 v.backgroundColor = UIColor.red } 1234567891011121314151617181920//1.定义变量 var,可以修改// 常量let 定义之后，不能修改//2.自动推导，变量/常量的类型会根据右侧的代码执行结果，推导对应的类型//热键option+click//3.在Swift中对类型要求异常严格// 任何不同类型的数据之间，不允许直接运算// 不会做任何默认的隐式转换，所有的类型确定，都要有程序员负责//4.Swift中，不存在基本数据类型，都是结构体func demo1() { let x = 10 let y = 10.5 // print(x + y) //1.将y转换成整数 //OC中的写法（int）y =>类型强转 //Swift中Int()结构体的构造函数 print(x + Int(y)) //2.将x转换成Double print(Double(x)+y)} 1234567func demo2() { //如果需要指定变量/常量的类型，也可直接使用let x:类型 = 值 //提示：在Swift开发中，极少使用直接指定类型，通常都是自动推导 let x :Double = 10 let y = 10.5 print(x + y)} 1234567891011121314151617 func demo(){ //整数： Int(OC中的NSInteger类似) var x = 10 x = 20 //小数：Double高（OC中的CGFloat） let y = 5.5 let v = UIView() print(x) print(y) print(v) } }","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"}],"author":"Mr.Zhao"},{"title":"Swift OC与Swift大致区别","slug":"11111","date":"2019-08-05T01:00:00.000Z","updated":"2019-08-06T08:58:14.009Z","comments":true,"path":"2019/08/05/11111/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/05/11111/","excerpt":"1.OC [[UIView alloc]initWithXXX:xxx] Swift UIView(XXX: ) UIView() ：类名（）与 alloc / init 等价","text":"1.OC [[UIView alloc]initWithXXX:xxx] Swift UIView(XXX: ) UIView() ：类名（）与 alloc / init 等价 2.OC [UIColor redColor] Swift UIColor.red && Color Literal3. 访问当前对象的属性，可以不使用self.建议：都不用,在编译器提示的时候，再添加，会对语境有更好的体会 原因:闭包（类似于OC block）,需要使用self.4. 没有’;’Swift默认不需要5. 枚举类型OC UIButtonTypeContactAdd Swift '.'contactAdd6. 监听方法OC @selector Swift #selector 如果有参数，不需要：7. 调试OC NSLog Swift print -没有时间 -效率比NSLog高 OC __FUNCTION__ Swift #function代码： 12345678910111213141516171819202122232425 class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() //1.创建一个视图 let v = UIView(frame: CGRect(x: 100, y: 100, width: 100, height: 100)) //2.设置背景颜色 v.backgroundColor = UIColor.red //3.添加 view .addSubview(v) //创建一个按钮 let btn = UIButton(type: .contactAdd) v.addSubview(btn) btn.addTarget(self, action: #selector(clickMe), for: .touchUpInside) } @objc func clickMe(btn:UIButton) -> (){ print(#function) print(btn) } }","categories":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://wesukilayezcy.github.io/tags/Swift/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day8","slug":"大数据学习-Day8","date":"2019-08-01T05:07:00.000Z","updated":"2019-08-06T08:58:28.894Z","comments":true,"path":"2019/08/01/大数据学习-Day8/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day8/","excerpt":"对之前爬虫爬到的智联招聘的数据进行mapreduce处理，再进行数据分析上传招聘数据到分布式文件系统 hdfs dfs –put /opt/zl0507.csv /","text":"对之前爬虫爬到的智联招聘的数据进行mapreduce处理，再进行数据分析上传招聘数据到分布式文件系统 hdfs dfs –put /opt/zl0507.csv / 在eclipse中新建package，重命名为com.sj.clean 其中新建类 CleanMapper.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.sj.clean;import java.io.IOException;import org.apache.hadoop.classification.InterfaceAudience.Private;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.NullWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Mapper;public class CleanMapper extends Mapper{ @Override protected void map(LongWritable key, Text value, Mapper.Context context) throws IOException, InterruptedException { //将第一行过滤掉,第一行偏移量为0 if(!key.toString().equals(\"0\")){ String[] arr=value.toString().split(\",\"); //用于一行数据，分割成7个字符串的数组 String[] cacheString=new String[7]; //存储第七个字段由于数据量太大，可能出现英文逗号（分隔符），从而产生错误，所以加了一个cachestring来进行拼接 StringBuffer stringBuffer =new StringBuffer(); for (int i=0;i","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day7","slug":"大数据学习-Day7","date":"2019-08-01T04:58:00.000Z","updated":"2019-08-06T08:58:37.502Z","comments":true,"path":"2019/08/01/大数据学习-Day7/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day7/","excerpt":"eclipse上编写mapreduce程序，进行词频统计开启分布式文件系统（这里为伪分布），将/opt/input/test.txt文件上传到分布式文件系统中的/input下hdfs dfs –put /opt/input/test.txt /input/ 保证安装好jdk_1.8.0_32bit","text":"eclipse上编写mapreduce程序，进行词频统计开启分布式文件系统（这里为伪分布），将/opt/input/test.txt文件上传到分布式文件系统中的/input下hdfs dfs –put /opt/input/test.txt /input/ 保证安装好jdk_1.8.0_32bit 配置hadoop的环境变量： path中加入 启动eclipse 新建MapReduceDemo Java项目，将hadoop相关的jar包配置在项目中 右键项目 Properties ->java build path ** -> **libraries 中add external jars 在src下新建package，命名为com.sj.mapreduce 新建类 WordCountMapper.java 1234567891011121314151617181920212223package com.sj.mapreduce;import java.io.IOException;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Mapper;public class WordCountMapper extends Mapper { @Override protected void map(LongWritable key, Text value, Mapper.Context context) throws IOException, InterruptedException { // TODO Auto-generated method stub// super.map(key, value, context); String line=value.toString(); String[] words=line.split(\" \"); for(int i=0;i","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day6","slug":"大数据学习-Day6","date":"2019-08-01T04:57:00.000Z","updated":"2019-08-06T08:58:46.269Z","comments":true,"path":"2019/08/01/大数据学习-Day6/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day6/","excerpt":"智联招聘数据爬取利用爬虫，爬取智联招聘的数据，其中因为智联招聘网站对爬虫进行了反爬机制，从网页源码爬不到div下面的内容，于是采用了获取json数据进行分析：","text":"智联招聘数据爬取利用爬虫，爬取智联招聘的数据，其中因为智联招聘网站对爬虫进行了反爬机制，从网页源码爬不到div下面的内容，于是采用了获取json数据进行分析： 自己的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143import requestsimport jsonfrom bs4 import BeautifulSoupurl='https://fe-api.zhaopin.com/c/i/sou?pageSize=90&cityId=489&workExperience=-1&education=-1&companyType=-1&employmentType=-1&jobWelfareTag=-1&kw=%E5%A4%A7%E6%95%B0%E6%8D%AE&kt=3&_v=0.79005936&x-zp-page-request-id=520adc5dcbde404f8f20d5c0846b54b5-1562324160122-21643&x-zp-client-id=0d243d91-4d7b-43f7-9551-07854f531ab2'header={\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}def spider_job_content(): response=requests.get(url=url,headers=header) print(response.status_code) if response.status_code==200: response.encoding='utf-8' html=response.text html0=json.loads(html) text='' file=open('spider_job.txt','w',encoding='utf-8') for result in html0['data']['results']:# print(result['company']['name']) jobname=result[\"jobName\"] company=result['company']['name'] URL=result['company']['url'] update=result[\"updateDate\"] salary=result['salary'] jobType=result[\"jobType\"][\"items\"][0][\"name\"] workingExp=result[\"workingExp\"]['name'] welfare=str(result[\"welfare\"]) text+='工作名称：'+jobname+'\\n' text+='公司名称：'+company+'\\n' text+='公司网站：'+url+'\\n' text+='更新日期：'+update+'\\n' text+='薪水：'+salary+'\\n' text+='工作类型：'+jobType+'\\n' text+='工作经验：'+workingExp+'\\n' text+='福利：'+welfare+'\\n\\n\\n'# print(html0['data']['results'][0]['company']['name'])# div_list=bfs.find_all('div',attrs={'class':'c-chat-ads'})# print(div_list)# for div in div_list:# job_name=bfs.find('div',attrs={'class':'contentpile__content__wrapper__item__info__box__jobname jobName'})# print(job_name)# text+='工作名称：'+job_name+'\\n' file.write(text) file.close() if __name__=='__main__': spider_job_content()老师的代码：import csvimport requestsimport jsonfrom lxml import etreeclass ZhiLian: def __init__(self): self.headers={\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}# 以可写的方式创建一个文件，名称叫招聘.csv，默认在这个文件中写入一行数据（company,city,edu,resumeCount,salary,jobName,detail） self.head = ['company','city','edu','resumeCount','salary','jobName','detail'] self.f=open('招聘.csv','w',encoding='utf-8',newline='') self.out = csv.writer(self.f) self.out.writerow(self.head)# with open('招聘.csv','w',encoding='utf-8',newline='')as f:# self.f_csv = csv.writer(f)# self.f_csv.writerow(head) def getHtml(self,url,data):# get请求获取网络数据 response=requests.get(url=url,params=data) response=response.content.decode(encoding='utf-8')# print(response) return response def parse(self,res): html=json.loads(res); for i in html['data']['results']: try: list=[]# 得到公司名称 company=i['company']['name']# 得到所在城市信息 city=i['city']['display']# 得到教育水平 eduLevel=i['eduLevel']['name']# 得到工作年限 workingExp=i['workingExp']['name']# 讲教育水平跟工作年限拼在一起 edu=eduLevel+\"/\"+workingExp# 得到薪水 salary=i['salary']# 得到工作岗位名称 jobName=i['jobName']# i[\"positionURL\"]得到当前项点击进入的二级页面详情的网址 初始化Xpath解析对象 data=etree.HTML(requests.get(i[\"positionURL\"]).content.decode(encoding='utf-8')) detail=data.xpath('string(//div[@class=\"describtion__detail-content\"])')# resumeCount=data.xpath('string(//div[@class=\"summary-plane__left\"]/ul/li[last()])') resumeCount=data.xpath('string(//ul[@class=\"summary-plane__info\"]/li[last()])') print(resumeCount) list.append(company) list.append(city) list.append(edu) list.append(resumeCount) list.append(salary) list.append(jobName) list.append(detail)# print(list) self.out.writerow(list) except: print(\"出错了\") def run(self): url=\"https://fe-api.zhaopin.com/c/i/sou\" for i in range(0,1000,90): data={ \"start\":i, \"pageSize\":90, \"cityId\":'530', \"workExperience\":-1, \"education\":-1, \"companyType\":-1, \"employmentType\":-1, \"jobWelfareTag\":-1, \"kw\":\"大数据\", \"kt\":-1, \"_v\":0.68686337, \"x-zp-page-request-id\":\"c6d2f5a9337c45ddbd6659b5a0fd1b33-1562378017635-920095\", \"x-zp-client-id\":\"a9b00a0c-0a03-43c5-b89b-6ec0c3deb104\" } # 获取网络json数据 res=self.getHtml(url,data) # 调用解析方法解析json数据 self.parse(res)if __name__=='__main__': zl=ZhiLian() zl.run()","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day5","slug":"大数据学习-Day5","date":"2019-08-01T04:55:00.000Z","updated":"2019-08-06T08:58:55.695Z","comments":true,"path":"2019/08/01/大数据学习-Day5/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day5/","excerpt":"安装Anaconda配置python环境python基本语法的讲解：变量类型、字典，循环结构，元组 requests包的基本讲解： 1234567resp=requests.get(&apos;URL&apos;)请求url resp.text 获得网页文本 resp.content 获得网页内容（二进制） resp.encoding 查看网页编码 resp.status_code 查看网页状态码 resp.json() 获取json数据 resp.headers 查看头部信息","text":"安装Anaconda配置python环境python基本语法的讲解：变量类型、字典，循环结构，元组 requests包的基本讲解： 1234567resp=requests.get('URL')请求url resp.text 获得网页文本 resp.content 获得网页内容（二进制） resp.encoding 查看网页编码 resp.status_code 查看网页状态码 resp.json() 获取json数据 resp.headers 查看头部信息 实例：爬取校花网的信息，并且保存到本地 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import requestsfrom bs4 import BeautifulSoupurl=\"http://www.xiaohuar.com/\"header={\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}# 发送网络请求，获取校花内容def spider_xiaohua_content(): response=requests.get(url=url,headers=header) print(response.status_code)# 判断是否请求成功 if response.status_code==200:# 设置编码模式 response.encoding='utf-8' html=response.content# 利用BeautifulSoup解析网页内容 bfs=BeautifulSoup(html,'html5lib') div_list=bfs.find_all('div',attrs={'class':'all_lanmu'})# 用于保存数据 text='' file=open('spider_xiaohua.txt','w',encoding='utf-8') for div in div_list:# 找到标题 title_div=div.find('div',attrs={'class':'title1000'}) title=title_div.find('a').string# print(title) text+='标题:'+title+'\\n\\n'# 获取列表信息 ul=div.find('ul') li_list=ul.find_all('li') for li in li_list: img_src=li.find('img').attrs['lazysrc']# 获取每个小图片点击后进入的二级详情页网址 a_href=li.find('a').attrs['href'] img_title=li.find('span').string school=li.find('b',attrs={'class':'b1'}).string love_counts=li.find('b',attrs={'class':'b2'}).string# 处理图片地址没有域名 手动加入 if url not in img_src: img_src=url+img_src text+='图片下载地址：'+img_src+'\\n' text+='详情页面：'+a_href+'\\n' text+='图片标题：'+img_title+'\\n' text+='学校：'+school+'\\n' file.write(text) file.close()if __name__== '__main__':spider_xiaohua_content()","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day4","slug":"大数据学习-Day4","date":"2019-08-01T04:17:00.000Z","updated":"2019-08-06T08:59:04.607Z","comments":true,"path":"2019/08/01/大数据学习-Day4/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day4/","excerpt":"1.配置伪分布式yarn：123456789cd /opt/hadoop-2.6.4/etc/hadoop/pwdlscp mapred-site.xml.template mapred-site.xmlvi mapred-site.xml","text":"1.配置伪分布式yarn：123456789cd /opt/hadoop-2.6.4/etc/hadoop/pwdlscp mapred-site.xml.template mapred-site.xmlvi mapred-site.xml 在 configuration中间加入下面配置： 123456 mapreduce.framework.name yarn vi yarn-site.xml 在configuration中间加入下面配置： 1234 yarn.nodemanager.aux-services mapreduce_shuffle 测试：启动yarn /opt/hadoop-2.6.4/sbin/start-yarn.sh jps查看是否有 12resourcemanagerNodeManager 浏览中查看 192.168.31.128:8088 2.HDFS常用命令： 命令 说明 -help [cmd] 显示命令的帮助信息 -ls(r) path 显示当前目录下所有文件 -du(s) path 显示目录中所有文件大小 -count[-q] path 显示目录中文件数量 -mv src dst 移动多个文件到目标目录 -cp src dst 复制多个文件到目标目录 -rm(r) 删除文件(夹) -put localsrc dst 本地文件复制到hdfs -copyFromLocal 同put -moveFromLocal 从本地文件移动到hdfs -get [-ignoreCrc] src localdst 复制文件到本地，可以忽略crc校验 -getmerge src localdst 将源目录中的所有文件排序合并到一个文件中 -cat src 在终端显示文件内容 -text src 在终端显示文件内容 -copyToLocal [-ignoreCrc] src localdst 复制到本地 -moveToLocal src localdst 移动 -mkdir path 创建文件夹 -touchz path 创建一个空文件 3.停止伪分布式：123/opt/hadoop-2.6.4/sbin/stop-yarn.sh/opt/hadoop-2.6.4/sbin/stop-dfs.shjps (如有多余的进程则用kill -9 强制杀掉) 4.配置分布式集群： cd /opt/hadoop-2.6.4/etc/hadoop 编辑core-site.xml,指定namenode为master机器，Master为集群老大 1234567vi core-site.xml fs.defaultFS hdfs://master:9000 编辑hdfs-site.xml，指定Namenode存储路径，指定数据节点DataNode存储路径，指定副本数量。 12345678910111213141516vi hdfs-site.xml dfs.namenode.name.dir /opt/dfs/name dfs.datanode.data.dir /opt/dfs/data dfs.replication 2 复制模板文件 cp mapred-site.xml.template mapred-site.xml 编辑mapred-site.xml 123456789101112131415vi mapred-site.xml mapred.job.tracker master:9001 mapreduce.framework.name yarn mapreduce.jobhistory.address master:10020 编辑yarn-site.xml 1234567891011121314vi yarn-site.xml yarn.resourcemanager.hostname master yarn.nodemanager.aux-services mapreduce_shuffle yarn.log-aggregation-enable true 编辑slaves，指定谁是小弟 vi slaves 删除原来的localhost加入slave0slave1 默认没有masters文件，创建masters文件 touch masters 编辑masters文件，文件中加入指定老大的节点 vi masters 加入：master 传输配置文件给slave0,slave1 Master: 123cd /opt/hadoop-2.6.4/etc/hadoopscp -r ./* root@slave1:/opt/hadoop-2.6.4/etc/hadoop/scp -r ./* root@slave0:/opt/hadoop-2.6.4/etc/hadoop/ 格式化分布式文件 hdfs namenode -format 启动集群： /opt/hadoop-2.6.4/sbin/start-dfs.sh 检测是否启动成功分布式文件系统： Master： jps 发现有NameNode、还有SecondaryNameNode说明Master中名称节点启动成功 slave0，slave1：jps发现有DataNode说明slave机器数据节点启动成功 windows浏览器中检测 192.168.31.128:50070 中的DataNodes中有slave0，slave1两个子节点说明OK 启动yarn /opt/hadoop-2.6.4/sbin/start-yarn.sh 检测： Master：jps发现有resourceManager说明master OK slave0，slave1：jps发现有NodeManager说明slave机器启动OK 失败常用解决方案：：1.暴力点方案Master: 12/opt/hadoop-2.6.4/sbin/stop-yarn.sh/opt/hadoop-2.6.4/sbin/stop-dfs.sh Master，slave0,slave1:jps（如果出了jps进程还有其他进程，用【kill -9 进程号】 强制杀死多余的进程） rm -rf /opt/dfs/* Master: 12hdfs namenode -format/opt/hadoop-2.6.4/sbin/start-dfs.sh master,slave0,slave1:jps发现在Master中有NameNode,SecondaryNameNode，在slave0，slave1发现有DataNode，说明启动成功，缺少任何一个说明失败。 Master: /opt/hadoop-2.6.4/sbin/start-yarn.sh master,slave0,slave1:jps发现在Master中有resourceManager，在slave0，slave1发现有NodeManager，说明启动成功，缺少任何一个说明失败。 分布式存储—-分布式计算 MapReduce1.CentOS7安装Mysql：12345cd /opt/sudo yum install wgetwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmrpm -ivh mysql-community-release-el7-5.noarch.rpmsudo yum install mysql-community-server 上述命令会安装以下包： apparmor mysql-client-5.7 mysql-common mysql-server mysql-server-5.7 mysql-server-core-5.7 启动和关闭mysql服务器： 12service mysql startservice mysql stop 确认是否启动成功，mysql节点处于LISTEN状态表示启动成功： sudo netstat -tap | grep mysql 出现LISTEN说明启动成功 进入mysql shell界面：mysql -u root -p 2.Mysql常用命令：解决利用sqoop导入MySQL中文乱码的问题（可以插入中文，但不能用sqoop导入中文） 导致导入时中文乱码的原因是character_set_server默认设置是latin1 说明 命令 显示编码格式 show variables like “char%”; 修改编码格式 set character_set_server=utf8; 显示数据库 show databases; 使用数据库 user mysql; 显示数据库 show tables; 显示数据表结构 describe user; 显示表中的记录 select * from 表名 创建数据库 create database aaa; 使用数据库 use aaa; 创建表 personcreate table person(id int(3) auto_increment not null primary key,xm varchar(10),xb varchar(2),csny date); 插入一条数据 insert into person values(null,’zhangsan’,’m’,’2018-8-24’); 查询出person表中所有的数据 select * from person; 修改xm=lisi的csny字段 update person set csny=’2018-08-22’ where xm=’lisi’; 删除张三那条数据 delete from person where xm=’zhangsan’; 删除表 show tables;drop table person; 删除数据库 show databases;drop database aaa; 显示mysql数据库版本 show variables like ‘version’;select version(); 3.安装Hive3.1首先上传apache-hive-1.2.1-bin.tar.gz到master的/opt/目录下 master：cd /opt/ 解压到指定/opt文件夹下sudo tar -zxvf apache-hive-1.2.1-bin.tar.gz 重命名apache-hive-1.2.1-bin为hivesudo mv apache-hive-1.2.1-bin hive 3.2:配置环境变量vi ~/.bashrc 在文件末尾加入： 12export HIVE_HOME=/opt/hiveexport PATH=$PATH:$HIVE_HOME/bin 生效配置文件source ~/.bashrc 3.3修改/opt/hive/conf下的hive-site.xml,将hive原来自带的derby改成mysql cd /opt/hive/conf 重命名mv hive-default.xml.template hive-default.xml 编辑hive-site.xmlvi hive-site.xml 123456789101112131415161718192021222324 javax.jdo.option.ConnectionURL jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true JDBC connect string for a JDBC metastore javax.jdo.option.ConnectionDriverName com.mysql.jdbc.Driver Driver class name for a JDBC metastore javax.jdo.option.ConnectionUserName hive username to use against metastore database javax.jdo.option.ConnectionPassword hive password to use against metastore database 3.4：启动mysql数据库，新建hive数据库mysql -u root -pshow databases; 新建一个Hive数据库，这个Hive数据库与hive-site.xml文件中//localhost:3306/hive的hive对应，用来保存hive元数据信息 create database hive; 3.5:配置mysql允许hive接入将所有数据库的所有表的所有权限都赋给hive用户，后面的hive适配hive-site.xml中配置的连接密码 grant all on *.* to hive@localhost identified by 'hive'; 刷新mysql系统权限关系表 flush privileges; 3.6：启动Hive在启动Hive之前，先启动hadoop集群，但是咱们现在装的是伪分布式的hive配置，所以先将集群改成伪分布式： 停掉之前的分布式集群 master: cd /opt/hadoop-2.6.4/sbin/ ./stop-all.sh(封装了stop-yarn.sh和stop-dfs.sh) jps (保证只剩下一个jps进程) 12345cd /opt/dfs/rm -rf *hdfs namenode -formatcd /opt/hadoop-2.6.4/sbin/./start-dfs.sh jps（查看出来NameNode，DataNode， SecondaryNameNode） cd /opt/hive/bin 启动Hive ./hive hive常用HiveQL操作 说明 命令 创建数据库 create database if not exists hive; 显示hive中包含的数据库 show databases; 显示hive中以h开头的数据库 show databases like ‘h.*’; 使用hive数据库 use hive; 删除不包含表的数据库 drop database if exists hive; 删除数据库和它包含的表 drop database if exists hive cascade;","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day3","slug":"大数据学习-Day3","date":"2019-08-01T03:14:00.000Z","updated":"2019-08-06T08:59:14.206Z","comments":true,"path":"2019/08/01/大数据学习-Day3/","link":"","permalink":"https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day3/","excerpt":"1.检查ip：1.每天关机之后，再次开机后，首先检查ip地址有没有发生改变（因用的动态IP） master，slave0，slave1：ifconfig 如果ip变了，修改对应三台机器的hosts文件中的IP映射","text":"1.检查ip：1.每天关机之后，再次开机后，首先检查ip地址有没有发生改变（因用的动态IP） master，slave0，slave1：ifconfig 如果ip变了，修改对应三台机器的hosts文件中的IP映射 2.安装JDK：Master：cd /opt/ 借助ssh Secure Shell工具上传jdk-8u101-linux-x64.tar.gz到master的opt目录下 ls 解压缩jdk压缩包tar -zxvf jdk-8u101-linux-x64.tar.gz 配置jdk环境变量sudo vi ~/.bashrc i在文件末尾追加： 12export JAVA_HOME=/opt/jdk1.8.0_101export PATH=$PATH:$JAVA_HOME/bin esc:wq! 让bashrc配置文件生效source ~/.bashrc 测试环境是否配置成功：java -version出现版本号说明成功 slave1，slave0安装JDK master: 远程传输命令将整个文件夹传输到slave0电脑的root用户opt目录下（-r 递归传输） scp -r jdk1.8.0_101/ root@slave0:/opt/ scp -r jdk1.8.0_101/ root@slave1:/opt/ scp ~/.bashrc root@slave0:~/.bashrc scp ~/.bashrc root@slave1:~/.bashrc slave0,slave1:source ~/.bashrc java -version 3.安装hadoop：master：借助工具上传hadoop压缩包到指定opt目录下 1234567cd /optlstar -zxvf hadoop-2.6.4.tar.gzcd /opt/hadoop-2.6.4/bin 测试hadoop能不能使用./hadoop version出现版本号说明可以使用 配置环境变量：vi ~/.bashrc 文件末尾追加： 12export HADOOP_HOME=/opt/hadoop-2.6.4export PATH=$PATH:$HADOOP_HOME/bin 生效配置文件 source ~/.bashrc 测试hadoop命令是否变为全局命令hadoop version 配置slave0，slave1： Master： 123456cd /optlsscp -r hadoop-2.6.4 root@slave0:/opt/scp -r hadoop-2.6.4 root@slave1:/opt/scp ~/.bashrc root@slave0:~/.bashrcscp ~/.bashrc root@slave1:~/.bashrc slave0,slave1: 12source ~/.bashrchadoop version 4.伪分布式搭建：4.1：cd /opt/hadoop-2.6.4/etc/hadoop/ 4.2：vi core-site.xml 在configuration标签中间加入： 1234 fs.defaultFS hdfs://master:9000 4.3：vi hdfs-site.xml 在configuration标签中间加入： 1234 dfs.replication 1 4.4:格式化分布式文件系统hdfs namenode -format 查看是否出错：status=0 说明没错，如果status=1说明出错了，出错看上面的关键词：***Exception vi命令常用命令： 123:set number 显示行数:22 跳转到22行 4.5：启动伪分布集群12cd /opt/hadoop-2.6.4/sbin/./start-dfs.sh jps出现以下三个代表伪分布式集群启动成功 12345NameNodeDataNodeSecondaryNameNode 测试： 在浏览器中输入：192.168.31.128:50070 查看dataNodes下是否有一个叫master的奴隶 注意事项： 启动伪分布式集群之前一定保证： 1.防火墙处于关闭状态 2.检查ping 自己能否ping通（ping master） 3.无密登录登陆OK 4.Java -version 5.hadoop version 失败常用解决方案： 暴力点方案 /opt/hadoop-2.6.4/sbin/stop-dfs.sh jps（如果出了jps进程还有其他进程，用【kill -9 进程号】 强制杀死多余的进程） 123456cd /tmp/hadoop-root/dfslsrm -rf *hdfs namenode -format/opt/hadoop-2.6.4/sbin/start-dfs.shjps 三个进程DataNode，NameNode，SecondaryNameNode都有，说明启动成功，缺少任何一个说明失败。 手动修改集群ID（clusterID）1234cd /tmp/hadoop-root/dfs/name/currentcat VERSIONcd /tmp/hadoop-root/dfs/data/current/cat VERSION 匹配下两个VERSION下的clusterID是否一致，不一致可以尝试手动修改一致再启动伪分布式文件系统测试 分布式文件系统常用命令： 过程 说明 hdfs dfs -mkdir /input 在分布式文件系统根目录下创建一个input目录 hdfs dfs -put /opt/input/test /input/ 上传linux文件系统中的/opt/input/test文件到分布式文件系统的/input下 hdfs dfs -rm -R /output 删除分布式文件系统的/output目录 hdfs dfs -cat /output/pa* 查看分布式文件系统的/output下以pa开头的文件内容 hdfs dfs -get /jd* /opt/ 下载分布式文件系统的根目录下的jd开头的压缩包文件到linux文件系统的/opt/目录下","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day2","slug":"Untitled","date":"2019-07-12T06:22:00.000Z","updated":"2019-08-06T08:59:24.269Z","comments":true,"path":"2019/07/12/Untitled/","link":"","permalink":"https://wesukilayezcy.github.io/2019/07/12/Untitled/","excerpt":"1.修改主机名：sudo vi /etc/sysconfig/network o:在当前行的下一行进入编辑模式 加入一句话：HOSTNAME=master","text":"1.修改主机名：sudo vi /etc/sysconfig/network o:在当前行的下一行进入编辑模式 加入一句话：HOSTNAME=master 2.修改域名解析文件sudo vi /etc/hostname 删除默认那句话，然后加入：master reboot：重启机器 3.关闭防火墙查看防火墙状态sudo firewall-cmd --state 临时关闭防火墙sudo systemctl stop firewalld.service 禁止开机自启动防火墙systemctl disable firewalld.service 4:克隆master两份分别命名为slave0,slave15.修改slave0各种名称为slave0，以及slave1名称。slave0: sudo vi /etc/sysconfig/network o:字母o进入编辑模式 12345HOSTNAME=slave0esc:wq! sudo vi /etc/hostname i:进入编辑模式删除里面文件内容master改成 slave0 reboot slave1: sudo vi /etc/sysconfig/network o:字母o进入编辑模式 12345HOSTNAME=slave1esc:wq! sudo vi /etc/hostname i:进入编辑模式,删除里面文件内容master改成slave1 reboot 注意： 1.三台机器防火墙都处于永久关闭状态 2.三台机器名称都对应了 3.保证三台机器能相互ping通 6：安装远程连接工具并修改hosts文件master: 1234567sudo vi /etc/hosts192.168.44.166 master192.168.44.167 slave0192.168.44.168 slave1 测试master能不能ping通slave0跟slave1 1234567891011121314151617master:ping 192.168.44.167ctrl+cping slave0ctrl+cping 192.168.44.168ctrl+cping slave1ctrl+c 将master下面的配置好的hosts文件传输给另外两台机器slave0跟slave1 master: 123sudo scp /etc/hosts root@slave0:/etc/hostssudo scp /etc/hosts root@slave1:/etc/hosts 查看slave0跟slave1中的hosts文件 slave0: cat /etc/hosts slave1: cat /etc/hosts 测试三台机器能不能用master，slave0，slave1代替IP地址相互ping通 7：配置无密登录Mster,slave0,slave1: ssh-keygen master到slave0的无密登录： master: 12345cd ~/.sshlsscp id_rsa.pub root@slave0:~/.ssh/master.pub slave0： cd ~/.ssh ls 创建文件 touch authorized_keys 修改文件权限 chmod 600 authoried_keys 复制master.pub文件内容然后追加到authorized_keys这个文件末尾 cat master.pub >> authorized_keys master: 测试master远程登录slave0,发现不需要再输入密码则可以直接登录slave0 ssh root@slave0 exit master到slave1无密码登录： master： 123cd ~/.sshscp id_rsa.pub root@slave1:~/.ssh/master.pub slave1: cd ~/.ssh ls 创建文件 touch authorized_keys 修改文件权限 chmod 600 authoried_keys 复制master.pub文件内容然后追加到authorized_keys这个文件末尾 cat master.pub >> authorized_keys 测试master远程登录slave1,发现不需要再输入密码则可以直接登录slave1 master: ssh root@slave1 exit slave1到master无密码登录： slave1： 123cd ~/.sshscp id_rsa.pub root@master:~/.ssh/slave1.pub master: cd ~/.ssh ls 创建文件 touch authorized_keys 修改文件权限 chmod 600 authoried_keys 复制slave1.pub文件内容然后追加到authorized_keys这个文件末尾 cat slave1.pub >> authorized_keys 测试slave1远程登录master,发现不需要再输入密码则可以直接登录master slave1: ssh root@master exit slave0到master无密码登录： slave0： 123cd ~/.sshscp id_rsa.pub root@master:~/.ssh/slave0.pub master: cd ~/.ssh ls (以下两部之前已经做过就不用做了： 创建文件 touch authorized_keys 修改文件权限 chmod 600 authoried_keys ) 复制slave0.pub文件内容然后追加到authorized_keys这个文件末尾 cat slave0.pub >> authorized_keys 测试slave0远程登录master,发现不需要再输入密码则可以直接登录master slave0: ssh root@master exit master到master无密码登录： master： cd ~/.ssh ls (以下两部之前已经做过就不用做了：创建文件 touch authorized_keys 修改文件权限 chmod 600 authoried_keys) 复制id_rsa.pub文件内容然后追加到authorized_keys这个文件末尾 cat id_rsa.pub >> authorized_keys 测试master远程登录master,发现不需要再输入密码则可以直接登录master master: ssh root@master exit 拓展: 文件权限：- rwx — — 第一个字母：- 普通文件 l 类似快捷方式 d 文件夹 第二、三、四个字母：当前用户对该文件的权限 r:是否可读 w:是否可写 x:是否可执行 第五、六、七个字母：当前用户组对该文件的权限 r:是否可读 w:是否可写 x:是否可执行 第八、九、十个字母：其他用户对该文件的权限 r:是否可读 w:是否可写 x:是否可执行 chmod 600 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 - - x - - - - - - 0 0 1 0 0 0 0 0 0 r w - - - - - - - 1 1 0 0 0 0 0 0 0 6 0 0 7 7 7 1 1 1 1 1 1 1 1 1 r w x r w x r w x - w - r - x r - - 0 1 0 1 0 1 1 0 0 2 5 4","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"大数据学习 Day1","slug":"我的第一篇博客文章","date":"2019-07-08T12:54:00.000Z","updated":"2019-08-06T08:59:35.405Z","comments":true,"path":"2019/07/08/我的第一篇博客文章/","link":"","permalink":"https://wesukilayezcy.github.io/2019/07/08/我的第一篇博客文章/","excerpt":"准备 安装VMware，并安装Centos,有无界面都可，无界面效率高","text":"准备 安装VMware，并安装Centos,有无界面都可，无界面效率高 过程 说明 虚拟机：VMware workstation11 Linux系统：CentOS-6.5-x86_64-bin-DVD1.iso 不带系统的笔记本或者台式类似win7 win8.1 win10 mac 等操作系统 选择 新建虚拟机 选择 自定义 选择 稍后安装操作系统 选择 linux Centos64位 选定存储地址 Cpu颗数 默认内存1g 选择仅主机模式 默认 默认 磁盘50G 默认 完成 编辑虚拟机设置 选择ISO镜像文件 开机 选第一个 Skip跳过 下一步 英语 英语 选择基础存储设备 不保存任何数据 主机名称 默认 时区 选 亚洲 上海 Root 管理员密码 选择自定义磁盘 创建分区 创建boot分区 一般300Mb 创建swap分区 一般是内存的2倍 创建/ 根分区 格式化硬盘 下一步 桌面即可 可以自定义安装包 在语言上 选中中文支持 重启 继续 同意 继续 是 日历 完成 登录 完成 Linux基本知识 Linux目录结构 目录 功能 / Linux系统的根目录，一般只存放目录 /bin和/usr/bin 命令（二进制）文件目录，包含可供root 用户和普通用户所使用的Linux命令和二进制文件，包含shell解析器等 /boot 系统引导和内核目录，存放引导装载文件 /dev 设备目录，存放各个硬件设备的信息，例如光驱、硬盘等 /etc 系统级别的配置文件存放的目录，一般由配置管理员来使用 /home 所有普通用户的家目录 /opt 给主机额外安装软件所摆放的目录 /root root用户的的根目录 /tmp 存放应用程序产生的临时数据不能在此目录下存放重要数据 /var 系统一般运行时需要改变的数据 /usr 应用程序相关目录命令、函数库、共享包、内核源码 常用命令 命令 功能 cd / 切换路径 cd .. 回到上一层路径 ls 查看当前目录下所有文件和文件夹 ls -a 显示隐藏文件 ls -l 查看详细信息（ll） mkdir 创建文件夹 touch 创建文件 mv /lx /opt/ 移动（剪切） mv lx xxx 重命名 cp lx.txt /opt/ 复制粘贴 vi xxx 打开文件 i 进去编辑模式 esc 退出编辑模式 :wq! w:写入 q：退出 ！：强制 rm -rf *** 递归删除文件或者文件夹 r:递归 f：强制 pwd 显示当前所在路径 ll 查看详细信息第一个字母：l：链接，d：文件夹，-：文件，第二三四个字母：当前用户的权限r：可读w：可写x：可执行第五六七个字母：当前用户组权限r：可读w：可写x：可执行 reboot 重启 cat 查看文件 本文总阅读量次","categories":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://wesukilayezcy.github.io/tags/大数据/"}],"author":"Mr.Zhao"},{"title":"Hello World","slug":"hello-world","date":"2019-07-08T12:49:00.000Z","updated":"2019-08-06T08:59:46.669Z","comments":true,"path":"2019/07/08/hello-world/","link":"","permalink":"https://wesukilayezcy.github.io/2019/07/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://wesukilayezcy.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://wesukilayezcy.github.io/tags/hexo/"}]}]}