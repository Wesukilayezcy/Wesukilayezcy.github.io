<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wesukilaye</title>
  
  <subtitle>Your choices please me, for now</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wesukilayezcy.github.io/"/>
  <updated>2019-08-13T02:37:07.699Z</updated>
  <id>https://wesukilayezcy.github.io/</id>
  
  <author>
    <name>Mr.Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart 泛型</title>
    <link href="https://wesukilayezcy.github.io/2019/08/13/Dart-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://wesukilayezcy.github.io/2019/08/13/Dart-泛型/</id>
    <published>2019-08-13T02:15:00.000Z</published>
    <updated>2019-08-13T02:37:07.699Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><font color="#D2691E" size="5">优点</font></h4><ul><li>适当地指定泛型类型会生成更好的代码。</li><li>可以使用泛型来减少代码重复。</li><li>泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)</li></ul><h4 id="如泛型数组"><a href="#如泛型数组" class="headerlink" title="如泛型数组"></a><font color="#D2691E" size="5">如泛型数组</font></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var names = List<String>();</span><br><span class="line">names.addAll(['Seth', 'Kathy', 'Lars']);</span><br><span class="line">names.add(42); // Error</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a><font color="#D2691E" size="5">泛型方法</font></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> getData<T>(T value){</span><br><span class="line">      return value;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">void main(){</span><br><span class="line"></span><br><span class="line">    // print(getData(21));</span><br><span class="line"></span><br><span class="line">    // print(getData('xxx'));</span><br><span class="line"></span><br><span class="line">    // getData<String>('你好');</span><br><span class="line"></span><br><span class="line">    print(getData<int>(12));</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a><font color="#D2691E" size="5">泛型接口</font></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">abstract class Storage<T>{</span><br><span class="line">  Map m = new Map();</span><br><span class="line">  void set(String key, T value);</span><br><span class="line">  void get(String key);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class Cache<T> implements Storage<T> {</span><br><span class="line">  @override</span><br><span class="line">  Map m = new Map();</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void get(String key) {</span><br><span class="line">    print(m[key]);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void set(String key, T value) {</span><br><span class="line">    print('set successed!');</span><br><span class="line">    m[key] = value;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">-----------------------</span><br><span class="line">Cache ch = new Cache<String>();</span><br><span class="line">  ch.set('name', '123');</span><br><span class="line">  // ch.set('name', 1232); // type 'int' is not a subtype of type 'String' of 'value'</span><br><span class="line">  ch.get('name');</span><br><span class="line">  </span><br><span class="line">  Cache ch2 = new Cache<Map>();</span><br><span class="line">  // ch2.set('name', '23'); // type 'String' is not a subtype of type 'Map<dynamic, dynamic>' of 'value'</span><br><span class="line">  ch2.set('ptbird', {'name': 'pt', 'age': 20});</span><br><span class="line">  ch2.get('ptbird');</span><br><span class="line">-------------------</span><br><span class="line">结果：</span><br><span class="line">set successed!</span><br><span class="line">123</span><br><span class="line">set successed!</span><br><span class="line">{name: pt, age: 20}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;优点&lt;/font&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;适当地指定泛型类型会生成更好的代码。&lt;/li&gt;
&lt;li&gt;可以使用泛型来减少代码重复。&lt;/li&gt;
&lt;li&gt;泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;如泛型数组&quot;&gt;&lt;a href=&quot;#如泛型数组&quot; class=&quot;headerlink&quot; title=&quot;如泛型数组&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;如泛型数组&lt;/font&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var names = List&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;names.addAll([&amp;apos;Seth&amp;apos;, &amp;apos;Kathy&amp;apos;, &amp;apos;Lars&amp;apos;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;names.add(42); // Error&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/tags/Dart/"/>
    
      <category term="泛型" scheme="https://wesukilayezcy.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Dart 函数</title>
    <link href="https://wesukilayezcy.github.io/2019/08/13/Dart-%E5%87%BD%E6%95%B0/"/>
    <id>https://wesukilayezcy.github.io/2019/08/13/Dart-函数/</id>
    <published>2019-08-13T01:26:00.000Z</published>
    <updated>2019-08-13T01:51:16.744Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color="#D2691E" size="5">定义</font></h4><h5 id="无返回值无参数"><a href="#无返回值无参数" class="headerlink" title="无返回值无参数"></a>无返回值无参数</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function_name() {  </span><br><span class="line">   //statements      </span><br><span class="line">}</span><br><span class="line">或者</span><br><span class="line">void function_name() { </span><br><span class="line">   //statements </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h5 id="无返回值有参数"><a href="#无返回值有参数" class="headerlink" title="无返回值有参数"></a>无返回值有参数</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_param(int n1,String s1) { </span><br><span class="line">   print(n1); </span><br><span class="line">   print(s1); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="有返回值无参数"><a href="#有返回值无参数" class="headerlink" title="有返回值无参数"></a>有返回值无参数</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String test() { </span><br><span class="line">   // function definition </span><br><span class="line">   return "hello world"; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a><font color="#D2691E" size="5">可选参数</font></h4><h5 id="可选的位置参数"><a href="#可选的位置参数" class="headerlink" title="可选的位置参数"></a>可选的位置参数</h5><p>要指定可选的位置参数，请使用方括号[ ]</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void main() { </span><br><span class="line">   test_param(123); </span><br><span class="line">} </span><br><span class="line">test_param(n1,[s1]) { </span><br><span class="line">   print(n1); </span><br><span class="line">   print(s1); </span><br><span class="line">}</span><br><span class="line">//123 </span><br><span class="line">//null</span><br></pre></td></tr></tbody></table></figure><h5 id="可选的命名参数"><a href="#可选的命名参数" class="headerlink" title="可选的命名参数"></a>可选的命名参数</h5><p>与位置参数不同，必须在传递值时指定参数名称。花括号{}可用于指定可选的命名参数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void main() { </span><br><span class="line">   test_param(123); </span><br><span class="line">   test_param(123,s1:'hello'); </span><br><span class="line">   test_param(123,s2:'hello',s1:'world'); </span><br><span class="line">}  </span><br><span class="line">test_param(n1,{s1,s2}) { </span><br><span class="line">   print(n1); </span><br><span class="line">   print(s1); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="带有默认值的可选参数"><a href="#带有默认值的可选参数" class="headerlink" title="带有默认值的可选参数"></a>带有默认值的可选参数</h5><p>默认情况下，还可以为函数参数指定值。 但是，这些参数也可以显式传递值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void main() { </span><br><span class="line">   test_param(123); </span><br><span class="line">}  </span><br><span class="line">void test_param(n1,{s1:12}) { </span><br><span class="line">   print(n1); </span><br><span class="line">   print(s1); </span><br><span class="line">}   //123 12</span><br></pre></td></tr></tbody></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a><font color="#D2691E" size="5">箭头函数</font></h4><p>箭头函数只能有一行，可以省略大括号，在箭头(=>)和分号(;)之间只能出现表达式(而不是语句)。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List l1 = [1, 2];</span><br><span class="line"></span><br><span class="line"> l1.forEach((item) {</span><br><span class="line">   print(item);</span><br><span class="line"> });</span><br><span class="line"></span><br><span class="line"> l1.forEach((item) => print(item));</span><br></pre></td></tr></tbody></table></figure><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a><font color="#D2691E" size="5">立即执行函数</font></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 立即执行方法</span><br><span class="line">  ((name) {</span><br><span class="line">    print('my name is ${name}');</span><br><span class="line">  })('postbird');</span><br></pre></td></tr></tbody></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><font color="#D2691E" size="5">闭包</font></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 闭包</span><br><span class="line"> Function getA() {</span><br><span class="line">   int a = 0;</span><br><span class="line">   return () {</span><br><span class="line">     a++;</span><br><span class="line">     print(a);</span><br><span class="line">   };</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> Function b = getA();</span><br><span class="line"> b();</span><br><span class="line"> b();</span><br><span class="line"> </span><br><span class="line"> //输出1 2</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;定义&lt;/font&gt;&lt;/h4&gt;&lt;h5 id=&quot;无返回值无参数&quot;&gt;&lt;a href=&quot;#无返回值无参数&quot; class=&quot;headerlink&quot; title=&quot;无返回值无参数&quot;&gt;&lt;/a&gt;无返回值无参数&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function_name() &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //statements      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void function_name() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //statements &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/tags/Dart/"/>
    
      <category term="函数" scheme="https://wesukilayezcy.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Dart map</title>
    <link href="https://wesukilayezcy.github.io/2019/08/12/Dart-map-1/"/>
    <id>https://wesukilayezcy.github.io/2019/08/12/Dart-map-1/</id>
    <published>2019-08-12T10:00:00.000Z</published>
    <updated>2019-08-13T01:23:27.519Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color="#D2691E" size="5">定义</font></h4><h5 id="不指定泛型"><a href="#不指定泛型" class="headerlink" title="不指定泛型"></a>不指定泛型</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var map1 = {'aa':'aaa','bb':22,'cc':true};//直接赋初始值</span><br><span class="line">   //print(map1);//{aa: aaa, bb: 22, cc: true}</span><br><span class="line">   </span><br><span class="line">   Map map3 = {"a":"a1","b":"b1"};//直接赋初始值</span><br><span class="line">   //print(map3);//{a: a1, b: b1}</span><br><span class="line">   </span><br><span class="line">   var map2 = new Map();</span><br><span class="line">   map2['dd']=3.3;</span><br><span class="line">   map2[2] = 'ddd22';</span><br><span class="line">//print(map2);//{dd: 3.3, 2: ddd22}</span><br><span class="line">//print(map2[3]);//null   如果不存在，则是null</span><br><span class="line">   map2[3]= null;//key存在  value存在 value的值为null</span><br><span class="line">//print(map2.length);//3    长度</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h5 id="指定泛型"><a href="#指定泛型" class="headerlink" title="指定泛型"></a>指定泛型</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var map1 = <String,String>{};</span><br><span class="line">   Map<int,String> map2 = new Map();</span><br><span class="line">   map2[1]="a";</span><br><span class="line">   map2[2] = "b";</span><br><span class="line">//print(map2);//{1: a, 2: b}</span><br><span class="line">   Map<String,int> map3 = {"a":1,"b":2};</span><br><span class="line">//print(map3);//{a: 1, b: 2}</span><br></pre></td></tr></tbody></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a><font color="#D2691E" size="5">属性</font></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Map<String,int> map6 = {"a":1,"b":2};</span><br><span class="line">//print(map6.length);//2  长度</span><br><span class="line">//print(map6.isNotEmpty);//true  是否不为空</span><br><span class="line">//print(map6.isEmpty);//false   是否为空</span><br><span class="line">//print(map6.keys);//(a, b)   key的集合</span><br><span class="line">//print(map6.values);//(1, 2)  value的集合</span><br><span class="line">//print(map6.entries);//(MapEntry(a: 1), MapEntry(b: 2))   map迭代的键值对集合</span><br></pre></td></tr></tbody></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a><font color="#D2691E" size="5">方法</font></h4><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a><font color="#D2691E" size="4">增加</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> Map<String,int> map7 = {"a":1,"b":2,"c":3,"d":4,"e":5};</span><br><span class="line">    //新增一个key value</span><br><span class="line">    map7["f"] = 6;//新增一个不存在的key</span><br><span class="line">//print(map7);//{a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}</span><br></pre></td></tr></tbody></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a><font color="#D2691E" size="4">修改</font></h5><h6 id="直接修改"><a href="#直接修改" class="headerlink" title="直接修改"></a>直接修改</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map<String,int> map8 = {"a":1,"b":2,"c":3,"d":4,"e":5};</span><br><span class="line">    map8["a"] = 11;</span><br><span class="line">    //print(map8);//{a: 11, b: 2, c: 3, d: 4, e: 5}</span><br></pre></td></tr></tbody></table></figure><h6 id="update-对指定的key的value做出修改"><a href="#update-对指定的key的value做出修改" class="headerlink" title="update() 对指定的key的value做出修改"></a>update() 对指定的key的value做出修改</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> Map<String,int> map = {"a":1,"b":2,"c":3};</span><br><span class="line">    int result3 = map.update("a", (value)=>(value*2));//key存在  根据参数函数修改其值</span><br><span class="line">//print(result3);//2</span><br><span class="line">//print(map);//{a: 2, b: 2, c: 3}</span><br><span class="line">//int result4 = map.update("d", (value)=>(value*2));//key不存在  报错</span><br><span class="line">    int result4 = map.update("d", (value)=>(value*2),ifAbsent: ()=>(10));//key不存在  但有ifAbsent参数 返回ifAbsent函数的值  并添加到map中</span><br><span class="line">//print(result4);//10</span><br><span class="line">//print(map23);//{a: 2, b: 2, c: 3, d: 10}</span><br></pre></td></tr></tbody></table></figure><h6 id="updateAll-根据参数函数的规则，批量修改map"><a href="#updateAll-根据参数函数的规则，批量修改map" class="headerlink" title="updateAll() 根据参数函数的规则，批量修改map"></a>updateAll() 根据参数函数的规则，批量修改map</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> Map<String,int> map = {"a":1,"b":2,"c":3};</span><br><span class="line">     map.updateAll((String key,int value){</span><br><span class="line">       return value*2;</span><br><span class="line">     });//</span><br><span class="line"> //print(map);//{a: 2, b: 4, c: 6}</span><br><span class="line"> </span><br><span class="line"> Map<String,int> map2 = {"a":1,"b":2,"c":3};</span><br><span class="line">   map2.updateAll((String key,int value){</span><br><span class="line">     if(key=="a"){return 10;}</span><br><span class="line">     if(key=="b"){return 20;}</span><br><span class="line">     return value*2;</span><br><span class="line">   });//</span><br><span class="line">//print(map2);//{a: 10, b: 20, c: 6}</span><br></pre></td></tr></tbody></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a><font color="#D2691E" size="4">删除</font></h5><h6 id="remove-删除一个key"><a href="#remove-删除一个key" class="headerlink" title="remove() 删除一个key"></a>remove() 删除一个key</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map<String,int> map = {"a":1,"b":2,"c":3,"d":4,"e":5};</span><br><span class="line">map.remove("b");</span><br><span class="line">//print(map);//{a: 11, c: 3, d: 4, e: 5}</span><br></pre></td></tr></tbody></table></figure><h6 id="removeWhere-根据条件批量删除"><a href="#removeWhere-根据条件批量删除" class="headerlink" title="removeWhere() 根据条件批量删除"></a>removeWhere() 根据条件批量删除</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map<String,int> map = {"a":1,"b":2,"c":3,"d":4,"e":5};</span><br><span class="line">    map.removeWhere((key,value)=>(value>3));//删除掉 符合参数函数的keyvalue对</span><br><span class="line">    //print(map);//{a: 1, b: 2, c: 3}</span><br></pre></td></tr></tbody></table></figure><h5 id="包含"><a href="#包含" class="headerlink" title="包含"></a><font color="#D2691E" size="4">包含</font></h5><h6 id="containsKey-是否包含key"><a href="#containsKey-是否包含key" class="headerlink" title="containsKey() 是否包含key"></a>containsKey() 是否包含key</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map<String,int> map = {"a":1,"b":2,"c":3,"d":4,"e":5};</span><br><span class="line">//print(map.containsKey("a"));//true   是否包含key</span><br><span class="line">//print(map.containsKey("aa"));//false  是否包含key</span><br></pre></td></tr></tbody></table></figure><h6 id="containsValue-是否包含value值"><a href="#containsValue-是否包含value值" class="headerlink" title="containsValue() 是否包含value值"></a>containsValue() 是否包含value值</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Map<String,int> map = {"a":1,"b":2,"c":3};</span><br><span class="line">//print(map.containsValue(1));//true</span><br><span class="line">//print(map.containsValue(4));//false</span><br></pre></td></tr></tbody></table></figure><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><font color="#D2691E" size="4">遍历</font></h5>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Map<String,int> map = {"a":1,"b":2,"c":3,"d":4,"e":5};</span><br><span class="line">    map.forEach((String key,int value){</span><br><span class="line">print("$key  $value");</span><br><span class="line">//a  1</span><br><span class="line">//b  2</span><br><span class="line">//c  3</span><br><span class="line">//d  4</span><br><span class="line">//e  5</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a><font color="#D2691E" size="4">合并</font></h5><h6 id="addAll-整体合并另一个map-泛型要一致"><a href="#addAll-整体合并另一个map-泛型要一致" class="headerlink" title="addAll() 整体合并另一个map 泛型要一致"></a>addAll() 整体合并另一个map 泛型要一致</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Map<String,int> map = {"a":1,"b":2,"c":3};</span><br><span class="line">    Map<String,int> other = {"a":1,"c":4,"d":7};</span><br><span class="line">    map.addAll(other);//key相同时value值后者覆盖前者，前者不存在时则添加进来</span><br><span class="line">//print(map);//{a: 1, b: 2, c: 4, d: 7}</span><br></pre></td></tr></tbody></table></figure><h6 id="addEntries-合并两个map-如果key有重复，被合并的map的value覆盖前者"><a href="#addEntries-合并两个map-如果key有重复，被合并的map的value覆盖前者" class="headerlink" title="addEntries() 合并两个map 如果key有重复，被合并的map的value覆盖前者"></a>addEntries() 合并两个map 如果key有重复，被合并的map的value覆盖前者</h6>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map<String,int> map = {"a":1,"b":2,"c":3};</span><br><span class="line">    Map<String,int> map1 = {"a":1,"b":4,"d":3,"e":5};</span><br><span class="line">    map.addEntries(map1.entries);</span><br><span class="line">//print(map);//{a: 1, b: 4, c: 3, d: 3, e: 5}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;定义&lt;/font&gt;&lt;/h4&gt;&lt;h5 id=&quot;不指定泛型&quot;&gt;&lt;a href=&quot;#不指定泛型&quot; class=&quot;headerlink&quot; title=&quot;不指定泛型&quot;&gt;&lt;/a&gt;不指定泛型&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	var map1 = &amp;#123;&amp;apos;aa&amp;apos;:&amp;apos;aaa&amp;apos;,&amp;apos;bb&amp;apos;:22,&amp;apos;cc&amp;apos;:true&amp;#125;;//直接赋初始值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //print(map1);//&amp;#123;aa: aaa, bb: 22, cc: true&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Map map3 = &amp;#123;&amp;quot;a&amp;quot;:&amp;quot;a1&amp;quot;,&amp;quot;b&amp;quot;:&amp;quot;b1&amp;quot;&amp;#125;;//直接赋初始值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //print(map3);//&amp;#123;a: a1, b: b1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var map2 = new Map();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   map2[&amp;apos;dd&amp;apos;]=3.3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   map2[2] = &amp;apos;ddd22&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//print(map2);//&amp;#123;dd: 3.3, 2: ddd22&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//print(map2[3]);//null   如果不存在，则是null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   map2[3]= null;//key存在  value存在 value的值为null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//print(map2.length);//3    长度&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/tags/Dart/"/>
    
      <category term="字典" scheme="https://wesukilayezcy.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
      <category term="Map" scheme="https://wesukilayezcy.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Dart list</title>
    <link href="https://wesukilayezcy.github.io/2019/08/08/Dart-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    <id>https://wesukilayezcy.github.io/2019/08/08/Dart-数值类型/</id>
    <published>2019-08-08T08:05:00.000Z</published>
    <updated>2019-08-08T09:12:42.249Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color="#D2691E" size="5">定义</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var list1 = List();// 不限定长度，不限定类型，可添加任意类型的数据</span><br><span class="line">   List list2 = List();// 不限定长度，不限定类型，可添加任意类型的数据</span><br><span class="line">   List list3 = List(2);//限定了长度为2  越界会报错，不限定类型，可添加任意类型的数据</span><br><span class="line">var list4 = [1,2,3];//初始就赋值了，限定了长度，限定了类型，只能是int</span><br><span class="line">   var list5 = [2,'3',true];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换</span><br><span class="line">   List list6 = ['a',2,'b',false];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换</span><br><span class="line">   var list7 = <String>["a","b"];//String类型</span><br><span class="line">   List<String> list8 = ['a','b','3'];</span><br><span class="line">   List<String> list9 = new List(2);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h5 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a><font color="#D2691E" size="5">常用属性</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List<String> list10 = List();</span><br><span class="line">   list10.add('aaa');</span><br><span class="line">   list10.add('bbb');</span><br><span class="line">   list10.add('ccc');</span><br><span class="line">   print(list10.length);//3    长度</span><br><span class="line">   print(list10.isEmpty);//false      是否为空</span><br><span class="line">   print(list10.isNotEmpty);//true     是否不为空</span><br><span class="line">   print(list10.reversed);//(ccc, bbb, aaa)      返回一个List的倒序排列的Iterable  不改变原List</span><br><span class="line">   print(list10.first);//aaa    第一个元素</span><br><span class="line">   print(list10.last);//ccc    最后一个元素</span><br></pre></td></tr></tbody></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><font color="#D2691E" size="5">常用方法</font></h5><ul><li><p>add() 添加一个元素到List末尾</p></li><li><p>addAll() 两个List合并</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> List<String> list10 = List();</span><br><span class="line">list10.add('aaa');</span><br><span class="line">list10.add('bbb');</span><br><span class="line">List<String> list11 = List();</span><br><span class="line">list11.add('ccc');</span><br><span class="line">list11.add('ddd');</span><br><span class="line">list11.addAll(list10);</span><br><span class="line">print(list11);//[ccc, ddd, aaa, bbb]</span><br></pre></td></tr></tbody></table></figure></li><li><p>插入</p><ul><li><p>insert(index,element) 在指定index处插入某个值</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List<int> list12 = List();</span><br><span class="line">list12.add(0);</span><br><span class="line">list12.add(1);</span><br><span class="line">list12.add(2);</span><br><span class="line">list12.add(3);</span><br><span class="line">print(list12);//[0, 1, 2, 3]</span><br><span class="line">list12.insert(1, 5);  //指定索引位置 插入值，其余顺延</span><br><span class="line">print(list12);// [0, 5, 1, 2, 3]</span><br></pre></td></tr></tbody></table></figure></li><li><p>insertAll(index,list) 在指定index处插入list</p></li></ul></li><li><p>删除</p><ul><li>remove(obj) 删除具体的元素 </li><li>removeAt(index) 删除索引位置元素</li><li>removeLast()删除末尾元素</li><li>removeRange(start,end) 范围删除</li><li>removeWhere() 根据条件删除</li></ul></li><li><p>clear() 清空数组</p></li><li><p>setRange(startIndex,endIndex,list) 范围修改List的值</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   List<String> list13 = List();</span><br><span class="line">   list13.add('aaa');</span><br><span class="line">   list13.add('bbb');</span><br><span class="line">   list13.add('ccc');</span><br><span class="line">   list13.add('ddd');</span><br><span class="line">// print(list13);// [aaa, bbb, ccc, ddd]</span><br><span class="line">   List<String> list14 = List();</span><br><span class="line">   list14.add("111");</span><br><span class="line">   list14.add("222");</span><br><span class="line">   list14.add("333");</span><br><span class="line">   list14.add("444");</span><br><span class="line">   list14.add("555");</span><br><span class="line">   list14.add("666");</span><br><span class="line">   list13.setRange(0,3, list14);//范围修改，从list14取出0 1 2位置的值，修改list13对应0 1 2位置的值，0-3含头不含尾，start和end相同，则不变。start和end任何一个超出list13 list14的角标 则报错。</span><br><span class="line">//print(list13);//[111, 222, ccc, ddd]</span><br></pre></td></tr></tbody></table></figure></li><li><p>replaceRange(start,end,list)范围替换 含头不含尾</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List<int> list20 = List();</span><br><span class="line">list20.add(0);</span><br><span class="line">list20.add(1);</span><br><span class="line">list20.add(2);</span><br><span class="line">list20.add(3);</span><br><span class="line">print(list20);//[0, 1, 2, 3]</span><br><span class="line">list20.replaceRange(1, 3, [5,6,7,8]);//范围替换  含头不含尾</span><br><span class="line">print(list27);//[0, 5, 6, 7, 8, 3]</span><br></pre></td></tr></tbody></table></figure></li><li><p>retainWhere(()=>(bool)) 根据条件筛选元素</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   List<int> list20 = List();</span><br><span class="line">   list20.add(0);</span><br><span class="line">   list20.add(1);</span><br><span class="line">   list20.add(2);</span><br><span class="line">   list20.add(3);</span><br><span class="line">   print(list20);//[0, 1, 2, 3]</span><br><span class="line">   list20.retainWhere((element)=>(element>2)); //根据条件保留住元素</span><br><span class="line">//print(list20);//[3, 4]</span><br></pre></td></tr></tbody></table></figure></li><li><p>firstWhere((element)=>(bool)) 返回第一个满足条件的元素（不是元素的index）</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   List<int> list21 = [1, 2, 3, 4, 5];</span><br><span class="line">   int result = list21.firstWhere((element)=>(element>2));//返回满足条件的第一个元素</span><br><span class="line">   //int result1 = list21.firstWhere((element)=>(element>44));//返回满足条件的第一个元素，不满足 报错</span><br><span class="line">   int result2 = list21.firstWhere((element)=>(element>44),orElse: ()=>(10));//返回满足条件的第一个元素，不满足 返回orElse方法的返回值</span><br><span class="line">//print(result7);//3</span><br><span class="line">//print(result8);//报错</span><br><span class="line">//print(result9);//10</span><br></pre></td></tr></tbody></table></figure></li><li><p>forEach() List遍历每个元素</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   List<int> list22 = [3, 4, 1, 2, 5];</span><br><span class="line">   list22.forEach((element){</span><br><span class="line">   //遍历每个元素  此时不可add或remove  否则报错 但可以修改元素值，</span><br><span class="line">     element += 1;</span><br><span class="line">//print(element);//依次输出：4   5  2  3  6</span><br><span class="line">     list22[3]=0;//直接修改list对应index的值</span><br><span class="line">     list22[0]=0;</span><br><span class="line">   });</span><br><span class="line">//print(list22);// [0, 4, 1, 0, 5]</span><br><span class="line"></span><br><span class="line">//for  List遍历每个元素</span><br><span class="line">   for(var x in list22){</span><br><span class="line">     print(x);//0  4  1  0   5</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure></li><li><p>map() 遍历现有List的每个元素，并做处理，返回一个新的Iterable</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   List<int> list23 = [3, 4, 1, 2, 5];</span><br><span class="line">   Iterable<String> result1 = list23.map((e)=>(e>2?"a":"b"));//用指定方法对每个元素做操作，将结果组成一个新的Iterable</span><br><span class="line">//print(result1);//(a, a, b, b, a)</span><br><span class="line">   Iterable<bool> result2 = list23.map((e)=>(e>2));</span><br><span class="line">//print(result2);//(true, true, false, false, true)</span><br></pre></td></tr></tbody></table></figure></li><li><p>reduce((a,b)=>(某种操作)) 用指定的方法对元素做连续操作，将结果返回</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List<int> list24 = [3, 4, 1, 2, 5];</span><br><span class="line">   int result1 = list24.reduce((a,b)=>(a+b));//3+4+1+2+5   用指定的方法对元素做连续操作，将结果返回</span><br><span class="line">//print(result1);//15</span><br><span class="line">   int result2 = list24.reduce((a,b)=>(a*b));//3*4*1*2*5   用指定的方法对元素做连续操作，将结果返回</span><br><span class="line">//print(result2);//120</span><br></pre></td></tr></tbody></table></figure></li><li><p>toSet() 将List转为Set 去除后面重复的元素</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List<int> list25 = [3, 4, 1, 2, 5,2,3,6];</span><br><span class="line">Set<int> result1 = list25.toSet();//将list转为set,将后面重复的都去掉</span><br><span class="line">//print(result1);//{3, 4, 1, 2, 5, 6}</span><br></pre></td></tr></tbody></table></figure></li><li><p>asMap() 将list转为map</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   List<String> list26 = List();</span><br><span class="line">   list26.add("aaa");</span><br><span class="line">   list26.add("bbb");</span><br><span class="line">   list26.add("ccc");</span><br><span class="line">   list26.add("ddd");</span><br><span class="line">   list26.add("eee");</span><br><span class="line">//print(list26);// [aaa, bbb, ccc, ddd, eee]</span><br><span class="line">   Map<int,String> map = list26.asMap();//list转为map  key为index  value为list的值</span><br><span class="line">//print(map);//{0: aaa, 1: bbb, 2: ccc, 3: ddd, 4: eee}</span><br></pre></td></tr></tbody></table></figure></li><li><p>join(“-“) 用指定的字符将List中每个元素都连接起来，返回一个字符串</p>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   List<int> list27 = [3, 4, 1, 2, 5];</span><br><span class="line">   String result1 = list27.join("-");//用指定的字符将每个元素都连接起来，返回一个字符串</span><br><span class="line">//print(result1);//3-4-1-2-5</span><br></pre></td></tr></tbody></table></figure></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;定义&lt;/font&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var list1 = List();// 不限定长度，不限定类型，可添加任意类型的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   List list2 = List();// 不限定长度，不限定类型，可添加任意类型的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   List list3 = List(2);//限定了长度为2  越界会报错，不限定类型，可添加任意类型的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var list4 = [1,2,3];//初始就赋值了，限定了长度，限定了类型，只能是int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var list5 = [2,&amp;apos;3&amp;apos;,true];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   List list6 = [&amp;apos;a&amp;apos;,2,&amp;apos;b&amp;apos;,false];//初始就赋值了，限定了长度，限定了类型，任意位置可用任意类型替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var list7 = &amp;lt;String&amp;gt;[&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;];//String类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   List&amp;lt;String&amp;gt; list8 = [&amp;apos;a&amp;apos;,&amp;apos;b&amp;apos;,&amp;apos;3&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   List&amp;lt;String&amp;gt; list9 = new List(2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/tags/Dart/"/>
    
      <category term="list" scheme="https://wesukilayezcy.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>Dart 字符串</title>
    <link href="https://wesukilayezcy.github.io/2019/08/08/Dart-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://wesukilayezcy.github.io/2019/08/08/Dart-字符串/</id>
    <published>2019-08-08T07:44:00.000Z</published>
    <updated>2019-08-08T09:12:53.149Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="定义-拼接"><a href="#定义-拼接" class="headerlink" title="定义+拼接"></a><font color="#D2691E" size="5">定义+拼接</font></h5><h6 id="单引号或者双引号的创建与拼接"><a href="#单引号或者双引号的创建与拼接" class="headerlink" title="单引号或者双引号的创建与拼接"></a>单引号或者双引号的创建与拼接</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">String a = 'abc';</span><br><span class="line">String b = "abc";</span><br><span class="line">//相邻字符串创建</span><br><span class="line">var c = 'hello' + ' ' + 'world';</span><br><span class="line">var b = 'hello'' ''world';</span><br><span class="line">var d = 'hello'   ' '     'world';</span><br><span class="line"></span><br><span class="line">var e = 'hello'</span><br><span class="line">' '</span><br><span class="line">'world';</span><br><span class="line"></span><br><span class="line">var f = '''</span><br><span class="line">hello world</span><br><span class="line">this is multi line</span><br><span class="line">''';</span><br><span class="line"></span><br><span class="line">var g = """</span><br><span class="line">hello world</span><br><span class="line">this is multi line</span><br><span class="line">""";</span><br><span class="line"></span><br><span class="line">var h = 'hello'',world'",OK";</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h6 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var s1 = 'In a raw string, not even \n gets \t special treatment.';</span><br><span class="line">print(s1);</span><br><span class="line">//结果</span><br><span class="line">In a raw string, not even </span><br><span class="line"> gets    special treatment.</span><br></pre></td></tr></tbody></table></figure><p> 加r，可以识别转义字符</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var s = r'In a raw string, not even \n gets \t special treatment.';</span><br><span class="line">  print(s);</span><br><span class="line"></span><br><span class="line">In a raw string, not even \n gets \t special treatment.</span><br></pre></td></tr></tbody></table></figure><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a><font color="#D2691E" size="5">搜索</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 'hello world';</span><br><span class="line">print(a.contains('wo'));    //true</span><br><span class="line">print(a.startsWith('h'));    //true    </span><br><span class="line">print(a.endsWith('d'));    //true</span><br><span class="line">print(a.indexOf('llo'));    //2</span><br></pre></td></tr></tbody></table></figure><h5 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a><font color="#D2691E" size="5">提取数据</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 'hello world';</span><br><span class="line">var b = a.split(' ');</span><br></pre></td></tr></tbody></table></figure><h5 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a><font color="#D2691E" size="5">大小写转换</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(a.toLowerCase());</span><br><span class="line">print(a.toUpperCase());</span><br></pre></td></tr></tbody></table></figure><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a><font color="#D2691E" size="5">替换</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print('hello world world!'.replaceAll('world', 'abc'));</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;定义-拼接&quot;&gt;&lt;a href=&quot;#定义-拼接&quot; class=&quot;headerlink&quot; title=&quot;定义+拼接&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;定义+拼接&lt;/font&gt;&lt;/h5&gt;&lt;h6 id=&quot;单引号或者双引号的创建与拼接&quot;&gt;&lt;a href=&quot;#单引号或者双引号的创建与拼接&quot; class=&quot;headerlink&quot; title=&quot;单引号或者双引号的创建与拼接&quot;&gt;&lt;/a&gt;单引号或者双引号的创建与拼接&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String a = &amp;apos;abc&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String b = &amp;quot;abc&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//相邻字符串创建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var c = &amp;apos;hello&amp;apos; + &amp;apos; &amp;apos; + &amp;apos;world&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = &amp;apos;hello&amp;apos;&amp;apos; &amp;apos;&amp;apos;world&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var d = &amp;apos;hello&amp;apos;   &amp;apos; &amp;apos;     &amp;apos;world&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var e = &amp;apos;hello&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos; &amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;world&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var f = &amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is multi line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var g = &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is multi line&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var h = &amp;apos;hello&amp;apos;&amp;apos;,world&amp;apos;&amp;quot;,OK&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/categories/Dart/"/>
    
    
      <category term="Dart" scheme="https://wesukilayezcy.github.io/tags/Dart/"/>
    
      <category term="String" scheme="https://wesukilayezcy.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Swift 字典</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-%E5%AD%97%E5%85%B8/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-字典/</id>
    <published>2019-08-05T09:24:00.000Z</published>
    <updated>2019-08-06T13:59:59.435Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="定义字典"><a href="#定义字典" class="headerlink" title="定义字典"></a><font color="#D2691E" size="5">定义字典</font></h5><h6 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Swift中用[]</span><br><span class="line">        //[String : Any]</span><br><span class="line">        let dic = ["name":"zhang","age":18] as [String : Any]</span><br><span class="line">        print(dic)</span><br><span class="line">        //定义字典的数组</span><br><span class="line">        let array:[[String:Any]] =[["name":"zhang","age":18],["name":"li","age":180]]</span><br><span class="line">        print(array)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var dictionary: [String:Int] = [:]</span><br><span class="line">var dictionary1 = ["key1": 55, "key2": 555]</span><br><span class="line">var dictionary2 = Dictionary<String, Int>()</span><br></pre></td></tr></tbody></table></figure><h5 id="字典增删改"><a href="#字典增删改" class="headerlink" title="字典增删改"></a><font color="#D2691E" size="5">字典增删改</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//可变var 不可变let</span><br><span class="line">      var dic = ["name":"zhang","age":18] as [String : Any]</span><br></pre></td></tr></tbody></table></figure><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//增</span><br><span class="line">dic["title"] = "大哥"</span><br><span class="line">print(dic)</span><br><span class="line">// 如果key不存在，则添加新元素</span><br><span class="line">dic.updateValue("XXX", forKey: "number")</span><br></pre></td></tr></tbody></table></figure><h6 id="改"><a href="#改" class="headerlink" title="改"></a>改</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//修改 通过key修改，key是唯一的</span><br><span class="line">dic["name"] = "大西瓜"</span><br><span class="line">print(dic)</span><br><span class="line">// 如果key存在，则修改value</span><br><span class="line">dic.updateValue("XXX", forKey: "name")</span><br></pre></td></tr></tbody></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//删除 -直接给定key</span><br><span class="line">//字典通过key来定位置，key必须是可以”hash 哈希“MD5一种</span><br><span class="line">//hash就是将字符串变成唯一的”整数“,便于查找，提高字典遍历的速度</span><br><span class="line">dic.removeAll()     // 删除所有元素</span><br><span class="line">dic.removeValue(forKey: "age")</span><br><span class="line">print(dic)</span><br></pre></td></tr></tbody></table></figure><h5 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a><font color="#D2691E" size="5">字典遍历</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let dic = ["name":"zhang","age":18,"title":"老板"] as [String : Any]</span><br><span class="line">      for e in dic {</span><br><span class="line">          print("\(e.key) \(e.value)")</span><br><span class="line">      }</span><br><span class="line">   </span><br><span class="line">      for (key,value) in dic {</span><br><span class="line">          print("\(key) \(value)")</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><h5 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a><font color="#D2691E" size="5">字典合并</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var dic = ["name":"zhang","age":18,"title":"老板"] as [String : Any]</span><br><span class="line">let dic1 = ["name":"大瓜","height":1.9] as [String : Any]</span><br><span class="line">      //字典不能直接相加</span><br><span class="line">      //思路，遍历dic1依次设置</span><br><span class="line">      //如果key存在,会修改</span><br><span class="line">      //如果key不存在，会新增!</span><br><span class="line">      for e in dic1 {</span><br><span class="line">          dic[e.key] = dic1[e.key]</span><br><span class="line">      }</span><br><span class="line">      print(dic)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;定义字典&quot;&gt;&lt;a href=&quot;#定义字典&quot; class=&quot;headerlink&quot; title=&quot;定义字典&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;定义字典&lt;/font&gt;&lt;/h5&gt;&lt;h6 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Swift中用[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //[String : Any]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let dic = [&amp;quot;name&amp;quot;:&amp;quot;zhang&amp;quot;,&amp;quot;age&amp;quot;:18] as [String : Any]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(dic)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //定义字典的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let array:[[String:Any]] =[[&amp;quot;name&amp;quot;:&amp;quot;zhang&amp;quot;,&amp;quot;age&amp;quot;:18],[&amp;quot;name&amp;quot;:&amp;quot;li&amp;quot;,&amp;quot;age&amp;quot;:180]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(array)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="字典" scheme="https://wesukilayezcy.github.io/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>Swift 数组</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-%E6%95%B0%E7%BB%84/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-数组/</id>
    <published>2019-08-05T08:58:00.000Z</published>
    <updated>2019-08-06T09:02:00.304Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a><font color="#D2691E" size="5">定义数组</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">func definitionArr()->(){</span><br><span class="line">   </span><br><span class="line">    var arr:[Any] = []//空 任意类型</span><br><span class="line">    var arr1:[String] = []//空 只能存字符串</span><br><span class="line">    var arr2:[Any] = ["1",1]</span><br><span class="line">    var arr4:[Dictionary] = []</span><br><span class="line">    </span><br><span class="line">    //自动推导的结果[String] ->表示数组中存储的是string</span><br><span class="line">        let array = ["张三","李四","王五"]</span><br><span class="line">        print(array)</span><br><span class="line">        //[Int]->表示数组中存储的是int</span><br><span class="line">        let array2 = [1,2,3,4,5]</span><br><span class="line">        print(array2)</span><br><span class="line">        </span><br><span class="line">        let p = CGPoint(x: 10, y: 300)</span><br><span class="line">        let array3 = [p]</span><br><span class="line">        print(array3)</span><br><span class="line">        </span><br><span class="line">        //混合数组:几乎不用</span><br><span class="line">        //如果类型不一致，自动推导结果为NSObject</span><br><span class="line">        let array4 = ["张三",1,p] as [Any]</span><br><span class="line">        print(array4)</span><br><span class="line">        //定义一个数组，指定类型是int</span><br><span class="line">        var array5 = [Int]()</span><br><span class="line">        for i in 0...8 {</span><br><span class="line">            array5.append(i)</span><br><span class="line">            print("\(array5) \(array5.capacity)")</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h5 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a><font color="#D2691E" size="5">数组遍历</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// MARK:数组的遍历</span><br><span class="line">    func demo1() {</span><br><span class="line">        let array = ["张三","李四","王五"]</span><br><span class="line">        //1.按照下标遍历</span><br><span class="line">        print("按照下标遍历")</span><br><span class="line">        for i in 0..<array.count {</span><br><span class="line">            print(array[i])</span><br><span class="line">        }</span><br><span class="line">        //2.for in遍历元素</span><br><span class="line">        print("按照for in遍历元素")</span><br><span class="line">        for s in array {</span><br><span class="line">            print(s)</span><br><span class="line">        }</span><br><span class="line">        //3.同时遍历下标和内容</span><br><span class="line">        print("同时遍历下标和内容")</span><br><span class="line">        //元组</span><br><span class="line">        for e in array.enumerated() {</span><br><span class="line">            print("\(e.offset) \(e.element)")</span><br><span class="line">        }</span><br><span class="line">        //4.遍历下标和内容2</span><br><span class="line">        print("同时遍历下标和内容2")</span><br><span class="line">        for (n,s) in array.enumerated() {</span><br><span class="line">            print("\(n) \(s)")</span><br><span class="line">        }</span><br><span class="line">        //5.反序遍历</span><br><span class="line">        print("反序遍历")</span><br><span class="line">        for s in array.reversed() {</span><br><span class="line">            print(s)</span><br><span class="line">        }</span><br><span class="line">        //6.反序遍历索引和内容</span><br><span class="line">        print("反序遍历索引和内容")</span><br><span class="line">        for (n,s) in array.enumerated().reversed() {</span><br><span class="line">            print("\(n) \(s)")</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h5 id="数组的增删改"><a href="#数组的增删改" class="headerlink" title="数组的增删改"></a><font color="#D2691E" size="5">数组的增删改</font></h5><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func addElement() -> () {</span><br><span class="line">    let arr1 = ["今","天","是","个","好","日","子"]</span><br><span class="line">    var arr = ["今","天","是","个","好","日","子","A","b"]</span><br><span class="line">    //添加数组</span><br><span class="line">    arr.append(contentsOf: arr1)</span><br><span class="line">    //print(arr)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func remove() -> () {</span><br><span class="line">    var arr = ["今","天","是","个","好","日","子","A","b"]</span><br><span class="line">    //删除指定index的元素</span><br><span class="line">    //arr.remove(at: 2)</span><br><span class="line">    //删除最后的一个元素</span><br><span class="line">    //arr.removeLast()</span><br><span class="line">    //删除最前的一个元素</span><br><span class="line">    //arr.removeFirst()</span><br><span class="line">    //单侧删除</span><br><span class="line">    //arr.removeFirst(3)</span><br><span class="line">    //单侧删除</span><br><span class="line">    //arr.removeLast(3)</span><br><span class="line">    //删除所有的元素</span><br><span class="line">    //arr.removeAll()</span><br><span class="line">    //是否保留arr的空间</span><br><span class="line">    arr.removeAll(keepingCapacity: true)</span><br><span class="line">    print(arr)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func insertElement() -> () {</span><br><span class="line">    var arr = ["今","天","是","个","好","日","子","A","b"]</span><br><span class="line">    //插入数据</span><br><span class="line">    arr.insert("1", at: 0)</span><br><span class="line">    //print(arr)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 这里是var变量， 不能是常量</span><br><span class="line">var array1 = [1, 2, 3, 4, 5]</span><br><span class="line">// 这样子就修改了第一个元素</span><br><span class="line">array1[0] = 9</span><br></pre></td></tr></tbody></table></figure><h5 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a><font color="#D2691E" size="5">数组合并</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// MARK:数组合并</span><br><span class="line">   func demo3()  {</span><br><span class="line">       //[String] var array = ["张三","李四","王五"]</span><br><span class="line">       var array = ["张三","李四","王五"] as [Any]</span><br><span class="line">       //[Any]</span><br><span class="line">       let array2 = ["老刀","1","2",180] as [Any]</span><br><span class="line">       //合并</span><br><span class="line">       //注意：合并的两个类型必须一致</span><br><span class="line">       array += array2</span><br><span class="line">       print(array)</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a><font color="#D2691E" size="5">数组去重</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">func arrRemovingWeight() -> () {</span><br><span class="line">    //数组去重</span><br><span class="line">    #if false</span><br><span class="line">        //方法1 原理：字典中key是唯一的</span><br><span class="line">        let array = [111, 222, 111]</span><br><span class="line">        var dictInts = Dictionary<String, Int>()</span><br><span class="line">        </span><br><span class="line">        for number in array {</span><br><span class="line">            dictInts[String(number)] = number</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        var result = [Int]()</span><br><span class="line">        for value in dictInts.values {</span><br><span class="line">            result.append(value)</span><br><span class="line">        }</span><br><span class="line">        print(result)</span><br><span class="line">    #endif</span><br><span class="line">    #if false</span><br><span class="line">    //方法2</span><br><span class="line">    let arr = ["1","2","3","4","3"]</span><br><span class="line">    var arr1:[String] = []</span><br><span class="line">    for item in arr {</span><br><span class="line">        </span><br><span class="line">        if !arr1.contains(item){</span><br><span class="line">            arr1.append(item)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    print(arr1)</span><br><span class="line">    #endif</span><br><span class="line">    //数组合并 只要不同的和只要相同的只需要在if的位置加判断即可</span><br><span class="line">    let arr = ["1","2","3","4"]</span><br><span class="line">    var arr1 = ["1","2","4","8"]</span><br><span class="line">    </span><br><span class="line">    for item in arr {</span><br><span class="line">        if !arr1.contains(item){</span><br><span class="line">            arr1.append(item)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    print(arr1)</span><br><span class="line"></span><br><span class="line">    //判断数组是否为空</span><br><span class="line">    if arr1.isEmpty {</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;定义数组&quot;&gt;&lt;a href=&quot;#定义数组&quot; class=&quot;headerlink&quot; title=&quot;定义数组&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;定义数组&lt;/font&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func definitionArr()-&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arr:[Any] = []//空 任意类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arr1:[String] = []//空 只能存字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arr2:[Any] = [&amp;quot;1&amp;quot;,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arr4:[Dictionary] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //自动推导的结果[String] -&amp;gt;表示数组中存储的是string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let array = [&amp;quot;张三&amp;quot;,&amp;quot;李四&amp;quot;,&amp;quot;王五&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //[Int]-&amp;gt;表示数组中存储的是int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let array2 = [1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(array2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let p = CGPoint(x: 10, y: 300)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let array3 = [p]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(array3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //混合数组:几乎不用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //如果类型不一致，自动推导结果为NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let array4 = [&amp;quot;张三&amp;quot;,1,p] as [Any]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(array4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //定义一个数组，指定类型是int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var array5 = [Int]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for i in 0...8 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            array5.append(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;\(array5) \(array5.capacity)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="数组" scheme="https://wesukilayezcy.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Swift String</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-String/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-String/</id>
    <published>2019-08-05T01:50:00.000Z</published>
    <updated>2019-08-07T01:40:02.680Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="字符串的子串"><a href="#字符串的子串" class="headerlink" title="字符串的子串"></a><font color="#D2691E" size="3">字符串的子串</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// MARK:字符串的子串</span><br><span class="line">    func demo4() {</span><br><span class="line">        //建议：一般使用NSString作为中转，因为swift取字串方法一直在优化</span><br><span class="line">        let str = "我们一起去飞"</span><br><span class="line">        let ocStr = str as NSString</span><br><span class="line">        let s1 = ocStr.substring(with: NSMakeRange(2, 3))</span><br><span class="line">        print(s1)</span><br><span class="line">        </span><br><span class="line">        print(str.startIndex)</span><br><span class="line">        print(str.endIndex)</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        guard let range=str.range(of: "一起") else {</span><br><span class="line">            print("没有找到字符串")</span><br><span class="line">            return</span><br><span class="line">        }</span><br><span class="line">        print(range)</span><br><span class="line">        </span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure> <a id="more"></a><h5 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a><font color="#D2691E" size="3">格式化</font></h5> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// MARK:格式化</span><br><span class="line">func demo3() {</span><br><span class="line">    let h = 8</span><br><span class="line">    let m = 9</span><br><span class="line">    let s = 6</span><br><span class="line">    </span><br><span class="line">    let dateStr = "\(h):\(m):\(s)"</span><br><span class="line">    print(dateStr)</span><br><span class="line">    //使用格式字符串格式化</span><br><span class="line">    let dateStr1 = String(format: "%02d:%02d:%02d", h,m,s)</span><br><span class="line">    print(dateStr1)</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a><font color="#D2691E" size="3">字符串的拼接</font></h5> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// MARK:字符串拼接</span><br><span class="line">func demo2() {</span><br><span class="line">    let str1 = "hello "</span><br><span class="line">    let str2 = "word"</span><br><span class="line">    var str = ""</span><br><span class="line">    str = str1 + str2</span><br><span class="line">    </span><br><span class="line">    let name = "老王"</span><br><span class="line">    let age = 18</span><br><span class="line">    let title:String? = "BOSS"</span><br><span class="line">    let point = CGPoint(x: 100, y: 200)</span><br><span class="line">    </span><br><span class="line">    // \(变量/常量)</span><br><span class="line">    let str1 = "\(name) \(age) \(title ?? "") \(point)"</span><br><span class="line">    </span><br><span class="line">    print(str)</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a><font color="#D2691E" size="3">字符串的长度</font></h5> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// MARK:字符串的长度</span><br><span class="line">func demo1() {</span><br><span class="line">    let str = "hello world你好"</span><br><span class="line">    //返回指定编码的对应的字节数量</span><br><span class="line">    //UTF-8的编码（0~4个），每个汉字是3个字节</span><br><span class="line">    print(str.lengthOfBytes(using: .utf8))</span><br><span class="line">    //字符串长度 -返回字符的个数</span><br><span class="line">    print(str.count)</span><br><span class="line">    //使用NSString中转</span><br><span class="line">    /**</span><br><span class="line">     值 as 类型</span><br><span class="line">     */</span><br><span class="line">    let ocStr = str as NSString</span><br><span class="line">    print(ocStr.length)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a><font color="#D2691E" size="3">字符串的遍历</font></h5> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// MARK:字符串的遍历</span><br><span class="line">func demo() {</span><br><span class="line">    let str = "我要飞得更高"</span><br><span class="line">    for c in str {</span><br><span class="line">        print(c)</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="字符串的插入和删除"><a href="#字符串的插入和删除" class="headerlink" title="字符串的插入和删除"></a><font color="#D2691E" size="3">字符串的插入和删除</font></h5>  <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//字符串插入</span><br><span class="line">var welcome = "hello"</span><br><span class="line">     welcome.insert("!", at: welcome.endIndex)//插入一个字符</span><br><span class="line">     print("insertNewCharacters:\(welcome)\n");//打印insertNewCharacters:hello!</span><br><span class="line">      //字符串删除</span><br><span class="line">     welcome.remove(at: welcome.index(before: welcome.endIndex))//删除最后一个字符</span><br><span class="line">     print("removeStrLastCharacters:\(welcome)\n")//打印 removeStrLastCharacters:hello word</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;字符串的子串&quot;&gt;&lt;a href=&quot;#字符串的子串&quot; class=&quot;headerlink&quot; title=&quot;字符串的子串&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;3&quot;&gt;字符串的子串&lt;/font&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// MARK:字符串的子串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func demo4() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //建议：一般使用NSString作为中转，因为swift取字串方法一直在优化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let str = &amp;quot;我们一起去飞&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let ocStr = str as NSString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let s1 = ocStr.substring(with: NSMakeRange(2, 3))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(s1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(str.startIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(str.endIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        guard let range=str.range(of: &amp;quot;一起&amp;quot;) else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&amp;quot;没有找到字符串&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(range)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="String" scheme="https://wesukilayezcy.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Swift for循环</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-for%E5%BE%AA%E7%8E%AF/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-for循环/</id>
    <published>2019-08-05T01:48:00.000Z</published>
    <updated>2019-08-06T09:02:35.923Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> swift对语法要求极其严格，尤其空格</span><br><span class="line"> */</span><br><span class="line">//反序遍历</span><br><span class="line">func demo1() {</span><br><span class="line">    for i in (0..<10).reversed() {</span><br><span class="line">        print(i)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">func demo (){</span><br><span class="line">    for i in 0..<5 {</span><br><span class="line">        print(i)</span><br><span class="line">    }</span><br><span class="line">    print("-------")</span><br><span class="line">    for i in 0...5 {</span><br><span class="line">        print(i)</span><br><span class="line">    }</span><br><span class="line">    print("-------")</span><br><span class="line">    let r1 = 0..<5</span><br><span class="line">    print(r1)</span><br><span class="line">    </span><br><span class="line">    let r2 = 0...5</span><br><span class="line">    print(r2)</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; swift对语法要求极其严格，尤其空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//反序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func demo1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in (0..&amp;lt;10).reversed() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func demo ()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in 0..&amp;lt;5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;-------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in 0...5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;-------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let r1 = 0..&amp;lt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(r1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let r2 = 0...5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(r2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="for循环" scheme="https://wesukilayezcy.github.io/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Swift switch</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-switch/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-switch/</id>
    <published>2019-08-05T01:46:00.000Z</published>
    <updated>2019-08-06T09:02:49.674Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">   switch 可以对任意类型的值进行分支，不再局限于整数</span><br><span class="line">   switch 一般不需要break</span><br><span class="line">   如果要多值，使用‘,’</span><br><span class="line">   所有分支至少需要一条指令,如果什么都不干，才使用break</span><br><span class="line">   */</span><br><span class="line">  func demo(num:Double){</span><br><span class="line">      switch num {</span><br><span class="line">      case 10,9:</span><br><span class="line">          print("优")</span><br><span class="line">      default:</span><br><span class="line">          print("一般")</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><a id="more"></a></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   switch 可以对任意类型的值进行分支，不再局限于整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   switch 一般不需要break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   如果要多值，使用‘,’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   所有分支至少需要一条指令,如果什么都不干，才使用break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  func demo(num:Double)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      switch num &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      case 10,9:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          print(&amp;quot;优&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          print(&amp;quot;一般&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="switch" scheme="https://wesukilayezcy.github.io/tags/switch/"/>
    
  </entry>
  
  <entry>
    <title>Swift 逻辑分支</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-%E9%80%BB%E8%BE%91%E5%88%86%E6%94%AF/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-逻辑分支/</id>
    <published>2019-08-05T01:41:00.000Z</published>
    <updated>2019-08-06T09:03:02.461Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="逻辑分支"><a href="#逻辑分支" class="headerlink" title="逻辑分支"></a>逻辑分支</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// MARK:-三目</span><br><span class="line">   func demo1() {</span><br><span class="line">       let x = 3</span><br><span class="line">       //三目的语法和OC一样</span><br><span class="line">       x > 5 ? print("大了"):print("小了")</span><br><span class="line">       //分享 有印象就行</span><br><span class="line">       //'()'表示空执行</span><br><span class="line">       x > 5 ? print("大了"):()</span><br><span class="line">   }</span><br><span class="line">   func demo(){</span><br><span class="line">       let x = 10</span><br><span class="line">       </span><br><span class="line">       /**</span><br><span class="line">        1.条件不需要（）</span><br><span class="line">        2.语句必须有{}</span><br><span class="line">        */</span><br><span class="line">       if x > 5 {</span><br><span class="line">           print("大了")</span><br><span class="line">       }else{</span><br><span class="line">           //Will never be executed</span><br><span class="line">           //永远不会执行 -编译器编译的时候会做语法检查</span><br><span class="line">           print("小了")</span><br><span class="line">       }</span><br><span class="line">       </span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><a id="more"></a></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;逻辑分支&quot;&gt;&lt;a href=&quot;#逻辑分支&quot; class=&quot;headerlink&quot; title=&quot;逻辑分支&quot;&gt;&lt;/a&gt;逻辑分支&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// MARK:-三目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   func demo1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       let x = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //三目的语法和OC一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       x &amp;gt; 5 ? print(&amp;quot;大了&amp;quot;):print(&amp;quot;小了&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //分享 有印象就行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //&amp;apos;()&amp;apos;表示空执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       x &amp;gt; 5 ? print(&amp;quot;大了&amp;quot;):()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   func demo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       let x = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        1.条件不需要（）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        2.语句必须有&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if x &amp;gt; 5 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           print(&amp;quot;大了&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           //Will never be executed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           //永远不会执行 -编译器编译的时候会做语法检查&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           print(&amp;quot;小了&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="三目" scheme="https://wesukilayezcy.github.io/tags/%E4%B8%89%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Swift 可选项</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-%E5%8F%AF%E9%80%89%E9%A1%B9/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-可选项/</id>
    <published>2019-08-05T01:32:00.000Z</published>
    <updated>2019-08-06T09:03:17.564Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="可选项的定义与简单使用"><a href="#可选项的定义与简单使用" class="headerlink" title="可选项的定义与简单使用"></a><font color="#D2691E" size="5">可选项的定义与简单使用</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    定义 可选项使用？</span><br><span class="line">    解包使用！，准备计算</span><br><span class="line">    */</span><br><span class="line">   func demo1()  {</span><br><span class="line">       //定义y，没有初始化</span><br><span class="line">       let y:Int?</span><br><span class="line">       //给常量设置数值，初始化的工作能做一次</span><br><span class="line">       y = 20</span><br><span class="line">       //再次修改常量会报错</span><br><span class="line">       //y = 30</span><br><span class="line">       print(y)</span><br><span class="line">       // *** var 的可选值为nil</span><br><span class="line">       // *** let 的可选值没有默认值</span><br><span class="line">       var x:Int?</span><br><span class="line">       x=10</span><br><span class="line">       x=100</span><br><span class="line">       print(x)</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">   }</span><br><span class="line">   func demo(){</span><br><span class="line">       //1.原始的可选项定义</span><br><span class="line">       //none:没有值，或者some某一类值</span><br><span class="line">       let x:Optional = 10</span><br><span class="line">       print(x)</span><br><span class="line">       //2.简单定义</span><br><span class="line">       //'?'用来定义y是一个可选的Int类型，可能没有值，也有可能是个整数</span><br><span class="line">       let  y:Int? = 20</span><br><span class="line">       print(y)</span><br><span class="line">       //不同类型之间的值不能直接运算！如果没有值，是nil。nil不是任何数据类型,不能参与计算</span><br><span class="line">       //print(x+y)</span><br><span class="line">       // '!'强行解包 -从可选值中强行获取对应的非空值</span><br><span class="line">       //程序员必须为每一个！负责</span><br><span class="line">       //程序中要少用！</span><br><span class="line">       print(x!+y!)</span><br><span class="line">       </span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h5 id="可选项的判断"><a href="#可选项的判断" class="headerlink" title="可选项的判断"></a><font color="#D2691E" size="5">可选项的判断</font></h5> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">  func demo4(name:String?,age:Int?)  {</span><br><span class="line">        if let name = name,let age = age {</span><br><span class="line">            //非空的name age仅在{}有效</span><br><span class="line">             print(name + String(age))</span><br><span class="line">        }</span><br><span class="line">        //guard let和if let的技巧</span><br><span class="line">        //使用同名的变量接受值，在后续使用的都是非空值，不需要解包</span><br><span class="line">        //可以避免起名字的烦恼</span><br><span class="line">        guard let name = name,let age = age else {</span><br><span class="line">            print("姓名或年龄为nil")</span><br><span class="line">            return  }</span><br><span class="line">        print(name + String(age))</span><br><span class="line">    }</span><br><span class="line">    // MARK:-guard 守卫/守护</span><br><span class="line">    //guard let和iflet 刚好相反</span><br><span class="line">    func demo3() {</span><br><span class="line">        let oName:String? = "老王"</span><br><span class="line">        let oAge:Int? = 10</span><br><span class="line">        //guard let守护一定有值，如果没有直接返回</span><br><span class="line">        guard let name = oName,let age = oAge else {</span><br><span class="line">            print("姓名或年龄为nil")</span><br><span class="line">            return  }</span><br><span class="line">        //代码运行至此，一定有值</span><br><span class="line">        //通常判断是否有值后，会做具体的逻辑实现 通常代码多</span><br><span class="line">        //如果使用if let 凭空多了一层分支，guard是降低分支层次的方法</span><br><span class="line">        print(name + String(age))</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    // MARK: -if let /var 连用语法，目的就是判断值</span><br><span class="line">    func demo2() {</span><br><span class="line">        let oName:String? = "老王"</span><br><span class="line">        let oAge:Int? = 30</span><br><span class="line">        if oName != nil && oAge != nil{</span><br><span class="line">            print(oName! + String(oAge!))</span><br><span class="line">        }</span><br><span class="line">        //if let 连用，判断对象的值是否为nil,{}内一定有值，不需要解包</span><br><span class="line">        //if var 连用， {}可以対值进行修改</span><br><span class="line">        if var name = oName,</span><br><span class="line">            let age = oAge {</span><br><span class="line">            name = "老李"</span><br><span class="line">            //进入分支后,name和age有值，不需要解包</span><br><span class="line">            //name age作用域仅在{}</span><br><span class="line">            print(name + String(age))</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    // MARK: -??</span><br><span class="line">    func demo1(x:Int?,y:Int?)  {</span><br><span class="line">        /**</span><br><span class="line">         ??是一个简单的三目</span><br><span class="line">         -如果有值，使用值</span><br><span class="line">         -如果没有值，使用？？后的值替代</span><br><span class="line">         */</span><br><span class="line">        print((x ?? 0)+(y ?? 0))</span><br><span class="line">        </span><br><span class="line">        let name:String?  = "老王"</span><br><span class="line">        print((name ?? "")+"你好")</span><br><span class="line">        // ?? 操作符的优先级低，在使用的时候，最好用（）包一下</span><br><span class="line">        print(name ?? ""+"你好")</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    func demo(x:Int?,y:Int?){</span><br><span class="line">       //1.强行解包有风险</span><br><span class="line">//        print(x! + y!)</span><br><span class="line">        </span><br><span class="line">        //2.使用if判断</span><br><span class="line">        //但是</span><br><span class="line">        if x != nil && y != nil {</span><br><span class="line">            print(x!+y!)</span><br><span class="line">        }else{</span><br><span class="line">            print("x或者y为nil")</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;可选项的定义与简单使用&quot;&gt;&lt;a href=&quot;#可选项的定义与简单使用&quot; class=&quot;headerlink&quot; title=&quot;可选项的定义与简单使用&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;可选项的定义与简单使用&lt;/font&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    定义 可选项使用？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    解包使用！，准备计算&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   func demo1()  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //定义y，没有初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       let y:Int?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //给常量设置数值，初始化的工作能做一次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       y = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //再次修改常量会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //y = 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       print(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       // *** var 的可选值为nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       // *** let 的可选值没有默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var x:Int?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       x=10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       x=100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       print(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   func demo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //1.原始的可选项定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //none:没有值，或者some某一类值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       let x:Optional = 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       print(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //2.简单定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //&amp;apos;?&amp;apos;用来定义y是一个可选的Int类型，可能没有值，也有可能是个整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       let  y:Int? = 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       print(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //不同类型之间的值不能直接运算！如果没有值，是nil。nil不是任何数据类型,不能参与计算&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //print(x+y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       // &amp;apos;!&amp;apos;强行解包 -从可选值中强行获取对应的非空值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //程序员必须为每一个！负责&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //程序中要少用！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       print(x!+y!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
      <category term="if let" scheme="https://wesukilayezcy.github.io/tags/if-let/"/>
    
      <category term="guard let" scheme="https://wesukilayezcy.github.io/tags/guard-let/"/>
    
  </entry>
  
  <entry>
    <title>Swift 变量与常量</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/Swift-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/Swift-变量与常量/</id>
    <published>2019-08-05T01:27:00.000Z</published>
    <updated>2019-08-06T09:04:22.835Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class ViewController: UIViewController {</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() {</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        demo2()</span><br><span class="line">    }</span><br><span class="line">    //关于var和let的选择</span><br><span class="line">    //不可变的更安全，开发的时候，通常都先使用let，在需要变化的时候，再改成var</span><br><span class="line">    func demo3() {</span><br><span class="line">        let v = UIView()</span><br><span class="line">        //仅仅修改v的属性，并没有修改v的指针地址</span><br><span class="line">        v.backgroundColor = UIColor.red</span><br><span class="line">        </span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//1.定义变量 var,可以修改</span><br><span class="line">//  常量let 定义之后，不能修改</span><br><span class="line">//2.自动推导，变量/常量的类型会根据右侧的代码执行结果，推导对应的类型</span><br><span class="line">//热键option+click</span><br><span class="line">//3.在Swift中对类型要求异常严格</span><br><span class="line">//  任何不同类型的数据之间，不允许直接运算</span><br><span class="line">//  不会做任何默认的隐式转换，所有的类型确定，都要有程序员负责</span><br><span class="line">//4.Swift中，不存在基本数据类型，都是结构体</span><br><span class="line">func demo1() {</span><br><span class="line">    let x = 10</span><br><span class="line">    let y = 10.5</span><br><span class="line">    // print(x + y)</span><br><span class="line">    //1.将y转换成整数</span><br><span class="line">    //OC中的写法（int）y =>类型强转</span><br><span class="line">    //Swift中Int()结构体的构造函数</span><br><span class="line">    print(x + Int(y))</span><br><span class="line">    </span><br><span class="line">    //2.将x转换成Double</span><br><span class="line">    print(Double(x)+y)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func demo2() {</span><br><span class="line">    //如果需要指定变量/常量的类型，也可直接使用let x:类型 = 值</span><br><span class="line">    //提示：在Swift开发中，极少使用直接指定类型，通常都是自动推导</span><br><span class="line">    let x :Double = 10</span><br><span class="line">    let y = 10.5</span><br><span class="line">    print(x + y)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    func demo(){</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //整数： Int(OC中的NSInteger类似)</span><br><span class="line">        var x = 10</span><br><span class="line">        x = 20</span><br><span class="line">        //小数：Double高（OC中的CGFloat）</span><br><span class="line">        let y = 5.5</span><br><span class="line">        </span><br><span class="line">        let v = UIView()</span><br><span class="line">        </span><br><span class="line">        print(x)</span><br><span class="line">        print(y)</span><br><span class="line">        print(v)</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;变量与常量&quot;&gt;&lt;a href=&quot;#变量与常量&quot; class=&quot;headerlink&quot; title=&quot;变量与常量&quot;&gt;&lt;/a&gt;变量与常量&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class ViewController: UIViewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        demo2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //关于var和let的选择&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //不可变的更安全，开发的时候，通常都先使用let，在需要变化的时候，再改成var&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func demo3() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let v = UIView()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //仅仅修改v的属性，并没有修改v的指针地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        v.backgroundColor = UIColor.red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift OC与Swift大致区别</title>
    <link href="https://wesukilayezcy.github.io/2019/08/05/11111/"/>
    <id>https://wesukilayezcy.github.io/2019/08/05/11111/</id>
    <published>2019-08-05T01:00:00.000Z</published>
    <updated>2019-08-06T08:58:14.009Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><pre><code>OC  [[UIView alloc]initWithXXX:xxx]Swift UIView(XXX: )UIView() ：类名（）与 alloc / init 等价</code></pre><a id="more"></a><h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><pre><code>OC [UIColor redColor]Swift  UIColor.red && Color Literal</code></pre><h5 id="3-访问当前对象的属性，可以不使用self"><a href="#3-访问当前对象的属性，可以不使用self" class="headerlink" title="3. 访问当前对象的属性，可以不使用self."></a>3. 访问当前对象的属性，可以不使用self.</h5><h5 id="建议："><a href="#建议：" class="headerlink" title="建议："></a><font color="#D2691E" size="3">建议：</font></h5><pre><code>都不用,在编译器提示的时候，再添加，会对语境有更好的体会</code></pre><h5 id="原因"><a href="#原因" class="headerlink" title=" 原因:"></a><font color="#D2691E" size="3"> 原因:</font></h5><pre><code>闭包（类似于OC block）,需要使用self.</code></pre><h5 id="4-没有’-’"><a href="#4-没有’-’" class="headerlink" title="4. 没有’;’"></a>4. 没有’;’</h5><pre><code>Swift默认不需要</code></pre><h5 id="5-枚举类型"><a href="#5-枚举类型" class="headerlink" title="5. 枚举类型"></a>5. 枚举类型</h5><pre><code>OC UIButtonTypeContactAddSwift '.'contactAdd</code></pre><h5 id="6-监听方法"><a href="#6-监听方法" class="headerlink" title="6. 监听方法"></a>6. 监听方法</h5><pre><code>OC @selectorSwift #selector 如果有参数，不需要：</code></pre><h5 id="7-调试"><a href="#7-调试" class="headerlink" title="7. 调试"></a>7. 调试</h5><pre><code>OC NSLogSwift print    -没有时间    -效率比NSLog高OC  __FUNCTION__Swift #function</code></pre><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><font color="#D2691E" size="3">代码：</font></h5> <figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> class ViewController: UIViewController {</span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() {</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        //1.创建一个视图</span><br><span class="line">        let v = UIView(frame: CGRect(x: 100, y: 100, width: 100, height: 100))</span><br><span class="line">        //2.设置背景颜色</span><br><span class="line">        v.backgroundColor = UIColor.red</span><br><span class="line">        //3.添加</span><br><span class="line">        view .addSubview(v)</span><br><span class="line">        </span><br><span class="line">        //创建一个按钮</span><br><span class="line">        let btn = UIButton(type: .contactAdd)</span><br><span class="line">        </span><br><span class="line">        v.addSubview(btn)</span><br><span class="line">        </span><br><span class="line">        btn.addTarget(self, action: #selector(clickMe), for: .touchUpInside)</span><br><span class="line">    }</span><br><span class="line">    @objc func clickMe(btn:UIButton) -> (){</span><br><span class="line">        print(#function)</span><br><span class="line">        print(btn)</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;OC  [[UIView alloc]initWithXXX:xxx]

Swift UIView(XXX: )

UIView() ：类名（）与 alloc / init 等价&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/categories/Swift/"/>
    
    
      <category term="Swift" scheme="https://wesukilayezcy.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习 Day8</title>
    <link href="https://wesukilayezcy.github.io/2019/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0-Day8/"/>
    <id>https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day8/</id>
    <published>2019-08-01T05:07:00.000Z</published>
    <updated>2019-08-06T08:58:28.894Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>对之前爬虫爬到的智联招聘的数据进行mapreduce处理，再进行数据分析<br>上传招聘数据到分布式文件系统</p><p><code>hdfs dfs –put /opt/zl0507.csv /</code></p><a id="more"></a><p>在eclipse中新建package，重命名为com.sj.clean</p><p>其中新建类 CleanMapper.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.sj.clean;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.classification.InterfaceAudience.Private;</span><br><span class="line">import org.apache.hadoop.io.LongWritable;</span><br><span class="line">import org.apache.hadoop.io.NullWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line">public class CleanMapper extends Mapper<LongWritable,Text,NullWritable,Text>{</span><br><span class="line">    @Override</span><br><span class="line">    protected void map(LongWritable key, Text value, Mapper<LongWritable, Text, NullWritable, Text>.Context context)</span><br><span class="line">            throws IOException, InterruptedException {</span><br><span class="line">        //将第一行过滤掉,第一行偏移量为0</span><br><span class="line">        if(!key.toString().equals("0")){</span><br><span class="line">            String[] arr=value.toString().split(",");</span><br><span class="line">            //用于一行数据，分割成7个字符串的数组</span><br><span class="line">            String[] cacheString=new String[7];</span><br><span class="line">            //存储第七个字段由于数据量太大，可能出现英文逗号（分隔符），从而产生错误，所以加了一个cachestring来进行拼接</span><br><span class="line">            StringBuffer stringBuffer =new StringBuffer();</span><br><span class="line">            for (int i=0;i<arr.length;i++){</span><br><span class="line">                if(i<6){</span><br><span class="line">                    cacheString[i]=arr[i];</span><br><span class="line"></span><br><span class="line">                }else if(i>=6){</span><br><span class="line">                    stringBuffer.append(arr[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            cacheString[6]=stringBuffer.toString();</span><br><span class="line">            if(check(cacheString)){</span><br><span class="line">                String data=String.join("|",cacheString);</span><br><span class="line">                context.write(NullWritable.get(), new Text(data));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    private boolean check(String [] arr){</span><br><span class="line">        for(String string : arr){</span><br><span class="line">            if(string.trim().equals("")){</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建类 CleanReducer.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.sj.clean;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.NullWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line">public class CleanReducer extends Reducer<NullWritable, Text, NullWritable, Text>{</span><br><span class="line">    @Override</span><br><span class="line">    protected void reduce(NullWritable arg0, Iterable<Text> values,</span><br><span class="line">            Reducer<NullWritable, Text, NullWritable, Text>.Context context) throws IOException, InterruptedException {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        for(Text text:values){</span><br><span class="line">            String [] datalist=text.toString().split("\\|");</span><br><span class="line">            if(datalist.length==7){</span><br><span class="line">                String data=String.join("|", datalist);</span><br><span class="line">                context.write(NullWritable.get(),new Text(data));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建类 Main.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.sj.clean;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.NullWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main {</span><br><span class="line">    public static void main(String[] args) throws Exception{</span><br><span class="line">        Configuration configuration=new Configuration();</span><br><span class="line">        Job job=Job.getInstance(configuration);</span><br><span class="line">        job.setJarByClass(Main.class);</span><br><span class="line">        job.setMapperClass(CleanMapper.class);</span><br><span class="line">        job.setMapOutputKeyClass(NullWritable.class);</span><br><span class="line">        job.setMapOutputValueClass(Text.class);</span><br><span class="line">        job.setReducerClass(CleanReducer.class);</span><br><span class="line">        job.setOutputKeyClass(NullWritable.class);</span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        FileInputFormat.setInputPaths(job, new Path("hdfs://192.168.245.132:9000/zl0507.csv"));</span><br><span class="line">        FileOutputFormat.setOutputPath(job,new Path("hdfs://192.168.245.132:9000/clean"));</span><br><span class="line">        Boolean res=job.waitForCompletion(true);</span><br><span class="line">        System.exit(res?0:-1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行Main.java，在分布式文件系统/clean/ 中生成文件</p><p>利用hive进行词频统计：</p><h5 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h5><ul><li>create database if not exists hive;</li><li>show databases;</li><li>show databases like ‘h.*’;</li><li>use hive;</li><li>show tables;</li><li>create table if not exists hive.userr(name string comment’username’,pwd string comment ‘password’, address struct<a href="street:string,city:string,state:string,zip:int" target="_blank" rel="noopener">street:string,city:string,state:string,zip:int</a>,identify map<int,tinyint> comment’number,sex’);</li></ul><h6 id="统计："><a href="#统计：" class="headerlink" title="统计："></a>统计：</h6><p>master：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">vi wc.txt</span><br></pre></td></tr></tbody></table></figure><p>写入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hongyutang love qiaoshuang</span><br><span class="line">xiaoyu is running</span><br><span class="line">china is great country</span><br><span class="line">beijing is the capital of china</span><br></pre></td></tr></tbody></table></figure><p>启动hive</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table wc(txt String) row format delimited fields terminated by '\t';</span><br><span class="line">load data local inpath '/opt/wc.txt' overwrite into table wc;</span><br><span class="line">select * from wc;</span><br><span class="line">select split(txt,' ') from wc;</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">["hongyutang","love","qiaoshuang"]</span><br><span class="line">["xiaoyu","is","running"]</span><br><span class="line">["china","is","great","country"]</span><br><span class="line">["beijing","is","the","capital","of","china"]</span><br></pre></td></tr></tbody></table></figure><p><code>select explode(split(txt,' ')) from wc;</code></p><p>结果:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hongyutang</span><br><span class="line">love</span><br><span class="line">qiaoshuang</span><br><span class="line">xiaoyu</span><br><span class="line">is</span><br><span class="line">running</span><br><span class="line">china</span><br><span class="line">is</span><br><span class="line">great</span><br><span class="line">country</span><br><span class="line">beijing</span><br><span class="line">is</span><br><span class="line">the</span><br><span class="line">capital</span><br><span class="line">of</span><br><span class="line">china</span><br></pre></td></tr></tbody></table></figure><p><code>select t1.word,count(t1.word) from (select explode(split(txt ,' ')) word from wc)t1 group by t1.word;</code></p><p>结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beijing 1</span><br><span class="line">capital 1</span><br><span class="line">china   2</span><br><span class="line">country 1</span><br><span class="line">great   1</span><br><span class="line">hongyutang      1</span><br><span class="line">is      3</span><br><span class="line">love    1</span><br><span class="line">of      1</span><br><span class="line">qiaoshuang      1</span><br><span class="line">running 1</span><br><span class="line">the     1</span><br><span class="line">xiaoyu  1</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对之前爬虫爬到的智联招聘的数据进行mapreduce处理，再进行数据分析&lt;br&gt;上传招聘数据到分布式文件系统&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hdfs dfs –put /opt/zl0507.csv /&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习 Day7</title>
    <link href="https://wesukilayezcy.github.io/2019/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0-Day7/"/>
    <id>https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day7/</id>
    <published>2019-08-01T04:58:00.000Z</published>
    <updated>2019-08-06T08:58:37.502Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="eclipse上编写mapreduce程序，进行词频统计"><a href="#eclipse上编写mapreduce程序，进行词频统计" class="headerlink" title="eclipse上编写mapreduce程序，进行词频统计"></a>eclipse上编写mapreduce程序，进行词频统计</h5><p>开启分布式文件系统（这里为伪分布），将/opt/input/test.txt文件上传到分布式文件系统中的/input下<br><code>hdfs dfs –put /opt/input/test.txt /input/</code></p><ol><li>保证安装好jdk_1.8.0_32bit<a id="more"></a></li><li>配置hadoop的环境变量：<br>   <img src="/img/BCABEB1F-4FC4-466C-A088-487352B55BE7.png" alt></li></ol><p> path中加入<br> <img src="/img/B9018D45-9340-4B72-80D5-36506EBF5815.png" alt></p><ol start="3"><li><p>启动eclipse</p><p>新建MapReduceDemo Java项目，将hadoop相关的jar包配置在项目中</p><p>右键项目 Properties ->java build path ** -> **libraries 中add external jars</p><p>在src下新建package，命名为com.sj.mapreduce</p><p>新建类 WordCountMapper.java</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.sj.mapreduce;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.LongWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line">public class WordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable> {</span><br><span class="line">    @Override</span><br><span class="line">    protected void map(LongWritable key, Text value, Mapper<LongWritable, Text, Text, IntWritable>.Context context)</span><br><span class="line">            throws IOException, InterruptedException {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">//        super.map(key, value, context);</span><br><span class="line">        String line=value.toString();</span><br><span class="line">        String[] words=line.split(" ");</span><br><span class="line">        for(int i=0;i<words.length;i++){</span><br><span class="line">            //</span><br><span class="line">            context.write(new Text(words[i]),new IntWritable(1) );</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 新建类WordCountReducer.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.sj.mapreduce;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line">public class WordCountReducer extends Reducer<Text, IntWritable, Text, IntWritable> {</span><br><span class="line">    @Override</span><br><span class="line">    protected void reduce(Text key, java.lang.Iterable<IntWritable> values, org.apache.hadoop.mapreduce.Reducer<Text,IntWritable,Text,IntWritable>.Context context) throws IOException ,InterruptedException {</span><br><span class="line">        int count =0;</span><br><span class="line">        for(IntWritable value :values){</span><br><span class="line">            count+=value.get();</span><br><span class="line">    };</span><br><span class="line">        context.write(key, new IntWritable(count));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建类WordCountDriver.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.sj.mapreduce;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">public class WordCountDriver {</span><br><span class="line">    //用Exception 抛异常，用Exception去接受所有异常，多态的体现</span><br><span class="line">    public static void main(String[] args) throws Exception {</span><br><span class="line">        System.setProperty("hadoop.home.dir", "D:\\hadoop-common-2.2.0-bin-master\\hadoop-common-2.2.0-bin-master");</span><br><span class="line"></span><br><span class="line">        //集群中所配置的hadoop的配置文件</span><br><span class="line">        Configuration configuration = new Configuration();</span><br><span class="line">        //创建job</span><br><span class="line">        Job job=Job.getInstance(configuration);</span><br><span class="line">        //指定本程序的jar包所在路径</span><br><span class="line">        job.setJarByClass(WordCountDriver.class);</span><br><span class="line">        //指定本job要使用的Mapper业务类</span><br><span class="line">        job.setMapperClass(WordCountMapper.class);</span><br><span class="line">        //指定mapper输出的k-v类型</span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        //制定本job要使用的Reduce业务类</span><br><span class="line">        job.setReducerClass(WordCountReducer.class);</span><br><span class="line">        //设置Reduce输出的最终k-v数据类型</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.setInputPaths(job, new Path("hdfs://192.168.245.132:9000/input/test.txt"));</span><br><span class="line">        FileOutputFormat.setOutputPath(job,new Path("hdfs://192.168.245.132:9000/output"));</span><br><span class="line">        Boolean res=job.waitForCompletion(true);</span><br><span class="line">        System.exit(res?0:-1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行WordCountDriver.java<br>对分布式系统中/input/test.txt中的测试文件进行词频统计，得到结果</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;eclipse上编写mapreduce程序，进行词频统计&quot;&gt;&lt;a href=&quot;#eclipse上编写mapreduce程序，进行词频统计&quot; class=&quot;headerlink&quot; title=&quot;eclipse上编写mapreduce程序，进行词频统计&quot;&gt;&lt;/a&gt;eclipse上编写mapreduce程序，进行词频统计&lt;/h5&gt;&lt;p&gt;开启分布式文件系统（这里为伪分布），将/opt/input/test.txt文件上传到分布式文件系统中的/input下&lt;br&gt;&lt;code&gt;hdfs dfs –put /opt/input/test.txt /input/&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保证安装好jdk_1.8.0_32bit
    
    </summary>
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习 Day6</title>
    <link href="https://wesukilayezcy.github.io/2019/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0-Day6/"/>
    <id>https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day6/</id>
    <published>2019-08-01T04:57:00.000Z</published>
    <updated>2019-08-06T08:58:46.269Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="智联招聘数据爬取"><a href="#智联招聘数据爬取" class="headerlink" title="智联招聘数据爬取"></a>智联招聘数据爬取</h5><p>利用爬虫，爬取智联招聘的数据，其中因为智联招聘网站对爬虫进行了反爬机制，从网页源码爬不到div下面的内容，于是采用了获取json数据进行分析：</p><a id="more"></a><p>自己的代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url='https://fe-api.zhaopin.com/c/i/sou?pageSize=90&cityId=489&workExperience=-1&education=-1&companyType=-1&employmentType=-1&jobWelfareTag=-1&kw=%E5%A4%A7%E6%95%B0%E6%8D%AE&kt=3&_v=0.79005936&x-zp-page-request-id=520adc5dcbde404f8f20d5c0846b54b5-1562324160122-21643&x-zp-client-id=0d243d91-4d7b-43f7-9551-07854f531ab2'</span><br><span class="line">header={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"}</span><br><span class="line"></span><br><span class="line">def spider_job_content():</span><br><span class="line">    response=requests.get(url=url,headers=header)</span><br><span class="line">    print(response.status_code)</span><br><span class="line">    if response.status_code==200:</span><br><span class="line">        response.encoding='utf-8'</span><br><span class="line">        html=response.text</span><br><span class="line"></span><br><span class="line">        html0=json.loads(html)</span><br><span class="line">        text=''</span><br><span class="line">        file=open('spider_job.txt','w',encoding='utf-8')</span><br><span class="line">        for result in html0['data']['results']:</span><br><span class="line">#             print(result['company']['name'])</span><br><span class="line">            jobname=result["jobName"]</span><br><span class="line">            company=result['company']['name']</span><br><span class="line">            URL=result['company']['url']</span><br><span class="line">            update=result["updateDate"]</span><br><span class="line">            salary=result['salary']</span><br><span class="line">            jobType=result["jobType"]["items"][0]["name"]</span><br><span class="line">            workingExp=result["workingExp"]['name']</span><br><span class="line">            welfare=str(result["welfare"])</span><br><span class="line">            text+='工作名称：'+jobname+'\n'</span><br><span class="line">            text+='公司名称：'+company+'\n'</span><br><span class="line">            text+='公司网站：'+url+'\n'</span><br><span class="line">            text+='更新日期：'+update+'\n'</span><br><span class="line">            text+='薪水：'+salary+'\n'</span><br><span class="line">            text+='工作类型：'+jobType+'\n'</span><br><span class="line">            text+='工作经验：'+workingExp+'\n'</span><br><span class="line">            text+='福利：'+welfare+'\n\n\n'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#         print(html0['data']['results'][0]['company']['name'])</span><br><span class="line">#         div_list=bfs.find_all('div',attrs={'class':'c-chat-ads'})</span><br><span class="line">#         print(div_list)</span><br><span class="line">#         for div in div_list:</span><br><span class="line">#             job_name=bfs.find('div',attrs={'class':'contentpile__content__wrapper__item__info__box__jobname jobName'})</span><br><span class="line">#             print(job_name)</span><br><span class="line">#             text+='工作名称：'+job_name+'\n'</span><br><span class="line"></span><br><span class="line">        file.write(text)</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line">    if __name__=='__main__':</span><br><span class="line">    spider_job_content()</span><br><span class="line">老师的代码：</span><br><span class="line"></span><br><span class="line">import csv</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">class ZhiLian:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"}</span><br><span class="line"></span><br><span class="line">#       以可写的方式创建一个文件，名称叫招聘.csv，默认在这个文件中写入一行数据（company,city,edu,resumeCount,salary,jobName,detail）</span><br><span class="line">        self.head = ['company','city','edu','resumeCount','salary','jobName','detail']</span><br><span class="line">        self.f=open('招聘.csv','w',encoding='utf-8',newline='')</span><br><span class="line">        self.out = csv.writer(self.f)</span><br><span class="line">        self.out.writerow(self.head)</span><br><span class="line"></span><br><span class="line">#         with open('招聘.csv','w',encoding='utf-8',newline='')as f:</span><br><span class="line">#             self.f_csv = csv.writer(f)</span><br><span class="line">#             self.f_csv.writerow(head)</span><br><span class="line"></span><br><span class="line">    def getHtml(self,url,data):</span><br><span class="line">#         get请求获取网络数据</span><br><span class="line">        response=requests.get(url=url,params=data)</span><br><span class="line">        response=response.content.decode(encoding='utf-8')</span><br><span class="line">#         print(response)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    def parse(self,res):</span><br><span class="line">        html=json.loads(res);</span><br><span class="line">        for i in html['data']['results']:</span><br><span class="line">            try:</span><br><span class="line">                list=[]</span><br><span class="line">#                 得到公司名称</span><br><span class="line">                company=i['company']['name']</span><br><span class="line">#     得到所在城市信息</span><br><span class="line">                city=i['city']['display']</span><br><span class="line">#     得到教育水平</span><br><span class="line">                eduLevel=i['eduLevel']['name']</span><br><span class="line">#     得到工作年限</span><br><span class="line">                workingExp=i['workingExp']['name']</span><br><span class="line">#     讲教育水平跟工作年限拼在一起</span><br><span class="line">                edu=eduLevel+"/"+workingExp</span><br><span class="line">#     得到薪水</span><br><span class="line">                salary=i['salary']</span><br><span class="line">#     得到工作岗位名称</span><br><span class="line">                jobName=i['jobName']</span><br><span class="line">#                 i["positionURL"]得到当前项点击进入的二级页面详情的网址       初始化Xpath解析对象</span><br><span class="line">                data=etree.HTML(requests.get(i["positionURL"]).content.decode(encoding='utf-8'))</span><br><span class="line">                detail=data.xpath('string(//div[@class="describtion__detail-content"])')</span><br><span class="line">#                 resumeCount=data.xpath('string(//div[@class="summary-plane__left"]/ul/li[last()])')</span><br><span class="line">                resumeCount=data.xpath('string(//ul[@class="summary-plane__info"]/li[last()])')</span><br><span class="line">                print(resumeCount)</span><br><span class="line">                list.append(company)</span><br><span class="line">                list.append(city)</span><br><span class="line">                list.append(edu)</span><br><span class="line">                list.append(resumeCount)</span><br><span class="line">                list.append(salary)</span><br><span class="line">                list.append(jobName)</span><br><span class="line">                list.append(detail)</span><br><span class="line">#                 print(list)</span><br><span class="line">                self.out.writerow(list)</span><br><span class="line">            except:</span><br><span class="line">                print("出错了")</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        url="https://fe-api.zhaopin.com/c/i/sou"</span><br><span class="line">        for i in range(0,1000,90):</span><br><span class="line">            data={</span><br><span class="line">                "start":i,</span><br><span class="line">                "pageSize":90,</span><br><span class="line">                "cityId":'530',</span><br><span class="line">                "workExperience":-1,</span><br><span class="line">                "education":-1,</span><br><span class="line">                "companyType":-1,</span><br><span class="line">                "employmentType":-1,</span><br><span class="line">                "jobWelfareTag":-1,</span><br><span class="line">                "kw":"大数据",</span><br><span class="line">                "kt":-1,</span><br><span class="line">                "_v":0.68686337,</span><br><span class="line">                "x-zp-page-request-id":"c6d2f5a9337c45ddbd6659b5a0fd1b33-1562378017635-920095",</span><br><span class="line">                "x-zp-client-id":"a9b00a0c-0a03-43c5-b89b-6ec0c3deb104"</span><br><span class="line">            }</span><br><span class="line">    #       获取网络json数据</span><br><span class="line">            res=self.getHtml(url,data)</span><br><span class="line">    #         调用解析方法解析json数据</span><br><span class="line">            self.parse(res)</span><br><span class="line"></span><br><span class="line">if __name__=='__main__':</span><br><span class="line">    zl=ZhiLian()</span><br><span class="line">    zl.run()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;智联招聘数据爬取&quot;&gt;&lt;a href=&quot;#智联招聘数据爬取&quot; class=&quot;headerlink&quot; title=&quot;智联招聘数据爬取&quot;&gt;&lt;/a&gt;智联招聘数据爬取&lt;/h5&gt;&lt;p&gt;利用爬虫，爬取智联招聘的数据，其中因为智联招聘网站对爬虫进行了反爬机制，从网页源码爬不到div下面的内容，于是采用了获取json数据进行分析：&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习 Day5</title>
    <link href="https://wesukilayezcy.github.io/2019/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0-Day5/"/>
    <id>https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day5/</id>
    <published>2019-08-01T04:55:00.000Z</published>
    <updated>2019-08-06T08:58:55.695Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h4 id="安装Anaconda配置python环境"><a href="#安装Anaconda配置python环境" class="headerlink" title="安装Anaconda配置python环境"></a>安装Anaconda配置python环境</h4><p>python基本语法的讲解：变量类型、字典，循环结构，元组</p><p>requests包的基本讲解：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resp=requests.get('URL')请求url  </span><br><span class="line">resp.text  获得网页文本  </span><br><span class="line">resp.content 获得网页内容（二进制）  </span><br><span class="line">resp.encoding  查看网页编码  </span><br><span class="line">resp.status_code 查看网页状态码  </span><br><span class="line">resp.json() 获取json数据  </span><br><span class="line">resp.headers 查看头部信息</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>实例：<br>爬取校花网的信息，并且保存到本地</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url="http://www.xiaohuar.com/"</span><br><span class="line">header={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36"}</span><br><span class="line"># 发送网络请求，获取校花内容</span><br><span class="line">def spider_xiaohua_content():</span><br><span class="line">    response=requests.get(url=url,headers=header)</span><br><span class="line">    print(response.status_code)</span><br><span class="line">#     判断是否请求成功</span><br><span class="line">    if response.status_code==200:</span><br><span class="line">#         设置编码模式</span><br><span class="line">        response.encoding='utf-8'</span><br><span class="line">        html=response.content</span><br><span class="line">#         利用BeautifulSoup解析网页内容</span><br><span class="line">        bfs=BeautifulSoup(html,'html5lib')</span><br><span class="line">        div_list=bfs.find_all('div',attrs={'class':'all_lanmu'})</span><br><span class="line"></span><br><span class="line">#         用于保存数据</span><br><span class="line">        text=''</span><br><span class="line">        file=open('spider_xiaohua.txt','w',encoding='utf-8')</span><br><span class="line">        for div in div_list:</span><br><span class="line">#             找到标题</span><br><span class="line">            title_div=div.find('div',attrs={'class':'title1000'})</span><br><span class="line">            title=title_div.find('a').string</span><br><span class="line">#             print(title)</span><br><span class="line">            text+='标题:'+title+'\n\n'</span><br><span class="line">#         获取列表信息    </span><br><span class="line">            ul=div.find('ul')</span><br><span class="line">            li_list=ul.find_all('li')</span><br><span class="line">            for li in li_list:</span><br><span class="line">                img_src=li.find('img').attrs['lazysrc']</span><br><span class="line">#                 获取每个小图片点击后进入的二级详情页网址</span><br><span class="line">                a_href=li.find('a').attrs['href']</span><br><span class="line">                img_title=li.find('span').string</span><br><span class="line">                school=li.find('b',attrs={'class':'b1'}).string</span><br><span class="line">                love_counts=li.find('b',attrs={'class':'b2'}).string</span><br><span class="line">#                 处理图片地址没有域名 手动加入</span><br><span class="line">                if url not in img_src:</span><br><span class="line">                    img_src=url+img_src</span><br><span class="line">                text+='图片下载地址：'+img_src+'\n'</span><br><span class="line">                text+='详情页面：'+a_href+'\n'</span><br><span class="line">                text+='图片标题：'+img_title+'\n'</span><br><span class="line">                text+='学校：'+school+'\n'</span><br><span class="line">        file.write(text)</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line">if __name__== '__main__':</span><br><span class="line">spider_xiaohua_content()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装Anaconda配置python环境&quot;&gt;&lt;a href=&quot;#安装Anaconda配置python环境&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda配置python环境&quot;&gt;&lt;/a&gt;安装Anaconda配置python环境&lt;/h4&gt;&lt;p&gt;python基本语法的讲解：变量类型、字典，循环结构，元组&lt;/p&gt;
&lt;p&gt;requests包的基本讲解：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;resp=requests.get(&amp;apos;URL&amp;apos;)请求url  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resp.text  获得网页文本  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resp.content 获得网页内容（二进制）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resp.encoding  查看网页编码  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resp.status_code 查看网页状态码  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resp.json() 获取json数据  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resp.headers 查看头部信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习 Day4</title>
    <link href="https://wesukilayezcy.github.io/2019/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0-Day4/"/>
    <id>https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day4/</id>
    <published>2019-08-01T04:17:00.000Z</published>
    <updated>2019-08-06T08:59:04.607Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="1-配置伪分布式yarn："><a href="#1-配置伪分布式yarn：" class="headerlink" title="1.配置伪分布式yarn："></a><font color="#D2691E" size="5">1.配置伪分布式yarn：</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/hadoop-2.6.4/etc/hadoop/</span><br><span class="line"></span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line"></span><br><span class="line">vi mapred-site.xml</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>在 configuration中间加入下面配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><configuration></span><br><span class="line">        <property></span><br><span class="line">                <name>mapreduce.framework.name</name></span><br><span class="line">                <value>yarn</value></span><br><span class="line">    </property></span><br><span class="line"></configuration></span><br></pre></td></tr></tbody></table></figure><p><code>vi yarn-site.xml</code></p><p>在configuration中间加入下面配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><property></span><br><span class="line">               <name>yarn.nodemanager.aux-services</name></span><br><span class="line">               <value>mapreduce_shuffle</value></span><br><span class="line"></property></span><br></pre></td></tr></tbody></table></figure><p>测试：启动yarn</p><p><code>/opt/hadoop-2.6.4/sbin/start-yarn.sh</code></p><p><code>jps</code>查看是否有</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resourcemanager</span><br><span class="line">NodeManager</span><br></pre></td></tr></tbody></table></figure><p>浏览中查看 192.168.31.128:8088</p><h5 id="2-HDFS常用命令："><a href="#2-HDFS常用命令：" class="headerlink" title="2.HDFS常用命令："></a><font color="#D2691E" size="5">2.HDFS常用命令：</font></h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>-help [cmd]</td><td>显示命令的帮助信息</td></tr><tr><td>-ls(r) path</td><td>显示当前目录下所有文件</td></tr><tr><td>-du(s) path</td><td>显示目录中所有文件大小</td></tr><tr><td>-count[-q] path</td><td>显示目录中文件数量</td></tr><tr><td>-mv src dst</td><td>移动多个文件到目标目录</td></tr><tr><td>-cp src dst</td><td>复制多个文件到目标目录</td></tr><tr><td>-rm(r)</td><td>删除文件(夹)</td></tr><tr><td>-put localsrc dst</td><td>本地文件复制到hdfs</td></tr><tr><td>-copyFromLocal</td><td>同put</td></tr><tr><td>-moveFromLocal</td><td>从本地文件移动到hdfs</td></tr><tr><td>-get [-ignoreCrc] src localdst</td><td>复制文件到本地，可以忽略crc校验</td></tr><tr><td>-getmerge src localdst</td><td>将源目录中的所有文件排序合并到一个文件中</td></tr><tr><td>-cat src</td><td>在终端显示文件内容</td></tr><tr><td>-text src</td><td>在终端显示文件内容</td></tr><tr><td>-copyToLocal [-ignoreCrc] src localdst</td><td>复制到本地</td></tr><tr><td>-moveToLocal src localdst</td><td>移动</td></tr><tr><td>-mkdir path</td><td>创建文件夹</td></tr><tr><td>-touchz path</td><td>创建一个空文件</td></tr></tbody></table><h5 id="3-停止伪分布式："><a href="#3-停止伪分布式：" class="headerlink" title="3.停止伪分布式："></a><font color="#D2691E" size="5">3.停止伪分布式：</font></h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/hadoop-2.6.4/sbin/stop-yarn.sh</span><br><span class="line">/opt/hadoop-2.6.4/sbin/stop-dfs.sh</span><br><span class="line">jps</span><br></pre></td></tr></tbody></table></figure><p>(如有多余的进程则用kill -9 强制杀掉)</p><h5 id="4-配置分布式集群："><a href="#4-配置分布式集群：" class="headerlink" title="4.配置分布式集群："></a><font color="#D2691E" size="5">4.配置分布式集群：</font></h5><p> <code>cd /opt/hadoop-2.6.4/etc/hadoop</code></p><p> 编辑core-site.xml,指定namenode为master机器，Master为集群老大</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi core-site.xml </span><br><span class="line"><configuration></span><br><span class="line">        <property></span><br><span class="line">                <name>fs.defaultFS</name></span><br><span class="line">                <value>hdfs://master:9000</value></span><br><span class="line">        </property></span><br><span class="line"></configuration></span><br></pre></td></tr></tbody></table></figure><p>编辑hdfs-site.xml，指定Namenode存储路径，指定数据节点DataNode存储路径，<br>指定副本数量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vi hdfs-site.xml</span><br><span class="line"></span><br><span class="line"><configuration></span><br><span class="line">        <property></span><br><span class="line">                <name>dfs.namenode.name.dir</name></span><br><span class="line">                <value>/opt/dfs/name</value></span><br><span class="line">        </property></span><br><span class="line"><property></span><br><span class="line">                <name>dfs.datanode.data.dir</name></span><br><span class="line">                <value>/opt/dfs/data</value></span><br><span class="line">        </property></span><br><span class="line"><property></span><br><span class="line">                <name>dfs.replication</name></span><br><span class="line">                <value>2</value></span><br><span class="line">        </property></span><br><span class="line"></configuration></span><br></pre></td></tr></tbody></table></figure><p>复制模板文件</p><p><code>cp mapred-site.xml.template mapred-site.xml</code></p><p>编辑mapred-site.xml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vi mapred-site.xml</span><br><span class="line"><configuration></span><br><span class="line">        <property></span><br><span class="line">                <name>mapred.job.tracker</name></span><br><span class="line">                <value>master:9001</value></span><br><span class="line">        </property></span><br><span class="line">        <property></span><br><span class="line">                <name>mapreduce.framework.name</name></span><br><span class="line">                <value>yarn</value></span><br><span class="line">         </property></span><br><span class="line">        <property></span><br><span class="line">                <name>mapreduce.jobhistory.address</name></span><br><span class="line">                <value>master:10020</value></span><br><span class="line">        </property></span><br><span class="line"></configuration></span><br></pre></td></tr></tbody></table></figure><p>编辑yarn-site.xml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi yarn-site.xml</span><br><span class="line"></span><br><span class="line"><property></span><br><span class="line"><name>yarn.resourcemanager.hostname</name></span><br><span class="line"><value>master</value></span><br><span class="line"></property></span><br><span class="line"><property></span><br><span class="line">         <name>yarn.nodemanager.aux-services</name></span><br><span class="line">         <value>mapreduce_shuffle</value></span><br><span class="line"></property></span><br><span class="line"><property></span><br><span class="line">         <name>yarn.log-aggregation-enable</name></span><br><span class="line">         <value>true</value></span><br><span class="line"></property></span><br></pre></td></tr></tbody></table></figure><p>编辑slaves，指定谁是小弟</p><p><code>vi slaves</code></p><p>删除原来的localhost加入<br>slave0<br>slave1</p><p>默认没有masters文件，创建masters文件</p><p><code>touch masters</code></p><p>编辑masters文件，文件中加入指定老大的节点</p><p><code>vi masters</code></p><p>加入：<br><code>master</code></p><p>传输配置文件给slave0,slave1</p><p>Master:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/hadoop-2.6.4/etc/hadoop</span><br><span class="line">scp -r ./* root@slave1:/opt/hadoop-2.6.4/etc/hadoop/</span><br><span class="line">scp -r ./* root@slave0:/opt/hadoop-2.6.4/etc/hadoop/</span><br></pre></td></tr></tbody></table></figure><p>格式化分布式文件</p><p><code>hdfs namenode -format</code></p><p>启动集群：</p><p><code>/opt/hadoop-2.6.4/sbin/start-dfs.sh</code></p><p>检测是否启动成功分布式文件系统：</p><p>Master：</p><p><code>jps</code></p><p>发现有NameNode、还有SecondaryNameNode说明Master中名称节点启动成功</p><p>slave0，slave1：<br><code>jps</code><br>发现有DataNode说明slave机器数据节点启动成功</p><p>windows浏览器中检测 192.168.31.128:50070 中的DataNodes中有slave0，slave1两个子节点说明OK</p><p>启动yarn</p><p><code>/opt/hadoop-2.6.4/sbin/start-yarn.sh</code></p><p>检测：</p><p>Master：<br><code>jps</code><br>发现有resourceManager说明master OK</p><p>slave0，slave1：<br><code>jps</code><br>发现有NodeManager说明slave机器启动OK</p><h5 id="失败常用解决方案：："><a href="#失败常用解决方案：：" class="headerlink" title="失败常用解决方案：："></a><font color="#D2691E" size="5">失败常用解决方案：：</font></h5><h5 id="1-暴力点方案"><a href="#1-暴力点方案" class="headerlink" title="1.暴力点方案"></a>1.暴力点方案</h5><p>Master:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/opt/hadoop-2.6.4/sbin/stop-yarn.sh</span><br><span class="line">/opt/hadoop-2.6.4/sbin/stop-dfs.sh</span><br></pre></td></tr></tbody></table></figure><p>Master，slave0,slave1:<br><code>jps</code><br>（如果出了jps进程还有其他进程，<br>用【kill -9 进程号】 强制杀死多余的进程）</p><p><code>rm -rf /opt/dfs/*</code></p><p>Master:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br><span class="line">/opt/hadoop-2.6.4/sbin/start-dfs.sh</span><br></pre></td></tr></tbody></table></figure><p>master,slave0,slave1:<br><code>jps</code><br>发现在Master中有NameNode,SecondaryNameNode，在slave0，slave1发现有DataNode，说明启动成功，缺少任何一个说明失败。</p><p>Master:</p><p><code>/opt/hadoop-2.6.4/sbin/start-yarn.sh</code></p><p>master,slave0,slave1:<br><code>jps</code><br>发现在Master中有resourceManager，在slave0，slave1发现有<br>NodeManager，说明启动成功，缺少任何一个说明失败。</p><h5 id="分布式存储—-分布式计算-MapReduce"><a href="#分布式存储—-分布式计算-MapReduce" class="headerlink" title="分布式存储—-分布式计算 MapReduce"></a><font color="#D2691E" size="5">分布式存储—-分布式计算 MapReduce</font></h5><h6 id="1-CentOS7安装Mysql："><a href="#1-CentOS7安装Mysql：" class="headerlink" title="1.CentOS7安装Mysql："></a>1.CentOS7安装Mysql：</h6><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line">sudo yum install wget</span><br><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></tbody></table></figure><p>上述命令会安装以下包：</p><ul><li>apparmor</li><li>mysql-client-5.7</li><li>mysql-common</li><li>mysql-server</li><li>mysql-server-5.7</li><li>mysql-server-core-5.7</li></ul><p>启动和关闭mysql服务器：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br></pre></td></tr></tbody></table></figure><p>确认是否启动成功，mysql节点处于LISTEN状态表示启动成功：</p><p><code>sudo netstat -tap | grep mysql</code></p><p>出现LISTEN说明启动成功</p><p>进入mysql shell界面：<br><code>mysql -u root -p</code></p><h5 id="2-Mysql常用命令："><a href="#2-Mysql常用命令：" class="headerlink" title="2.Mysql常用命令："></a>2.Mysql常用命令：</h5><p>解决利用sqoop导入MySQL中文乱码的问题（可以插入中文，但不能用sqoop导入中文）</p><p>导致导入时中文乱码的原因是character_set_server默认设置是latin1</p><table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>显示编码格式</td><td>show variables like “char%”;</td></tr><tr><td>修改编码格式</td><td>set character_set_server=utf8;</td></tr><tr><td>显示数据库</td><td>show databases;</td></tr><tr><td>使用数据库</td><td>user mysql;</td></tr><tr><td>显示数据库</td><td>show tables;</td></tr><tr><td>显示数据表结构</td><td>describe user;</td></tr><tr><td>显示表中的记录</td><td>select * from 表名</td></tr><tr><td>创建数据库</td><td>create database aaa;</td></tr><tr><td>使用数据库</td><td>use aaa;</td></tr><tr><td>创建表</td><td>personcreate table person(id int(3) auto_increment not null primary key,xm varchar(10),xb varchar(2),csny date);</td></tr><tr><td>插入一条数据</td><td>insert into person values(null,’zhangsan’,’m’,’2018-8-24’);</td></tr><tr><td>查询出person表中所有的数据</td><td>select * from person;</td></tr><tr><td>修改xm=lisi的csny字段</td><td>update person set csny=’2018-08-22’ where xm=’lisi’;</td></tr><tr><td>删除张三那条数据</td><td>delete from person where xm=’zhangsan’;</td></tr><tr><td>删除表</td><td>show tables;drop table person;</td></tr><tr><td>删除数据库</td><td>show databases;drop database aaa;</td></tr><tr><td>显示mysql数据库版本</td><td>show variables like ‘version’;select version();</td></tr></tbody></table><h5 id="3-安装Hive"><a href="#3-安装Hive" class="headerlink" title="3.安装Hive"></a>3.安装Hive</h5><h6 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h6><p>首先上传apache-hive-1.2.1-bin.tar.gz到master的/opt/目录下</p><p>master：<br><code>cd /opt/</code></p><p>解压到指定/opt文件夹下<br><code>sudo tar -zxvf apache-hive-1.2.1-bin.tar.gz</code></p><p>重命名apache-hive-1.2.1-bin为hive<br><code>sudo mv apache-hive-1.2.1-bin hive</code></p><h6 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2:配置环境变量"></a>3.2:配置环境变量</h6><p><code>vi ~/.bashrc</code></p><p>在文件末尾加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/opt/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></tbody></table></figure><p>生效配置文件<br><code>source ~/.bashrc</code></p><h6 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h6><p>修改/opt/hive/conf下的hive-site.xml,将hive原来自带的derby改成mysql</p><p><code>cd /opt/hive/conf</code></p><p>重命名<br><code>mv hive-default.xml.template hive-default.xml</code></p><p>编辑hive-site.xml<br><code>vi hive-site.xml</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><?xml version="1.0" encoding="UTF-8" standalone="no"?></span><br><span class="line"><?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><br><span class="line"><configuration></span><br><span class="line">  <property></span><br><span class="line">    <name>javax.jdo.option.ConnectionURL</name></span><br><span class="line">    <value>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true</value></span><br><span class="line">    <description>JDBC connect string for a JDBC metastore</description></span><br><span class="line">  </property></span><br><span class="line">  <property></span><br><span class="line">    <name>javax.jdo.option.ConnectionDriverName</name></span><br><span class="line">    <value>com.mysql.jdbc.Driver</value></span><br><span class="line">    <description>Driver class name for a JDBC metastore</description></span><br><span class="line">  </property></span><br><span class="line">  <property></span><br><span class="line">    <name>javax.jdo.option.ConnectionUserName</name></span><br><span class="line">    <value>hive</value></span><br><span class="line">    <description>username to use against metastore database</description></span><br><span class="line">  </property></span><br><span class="line">  <property></span><br><span class="line">    <name>javax.jdo.option.ConnectionPassword</name></span><br><span class="line">    <value>hive</value></span><br><span class="line">    <description>password to use against metastore database</description></span><br><span class="line">  </property></span><br><span class="line"></configuration></span><br></pre></td></tr></tbody></table></figure><h6 id="3-4：启动mysql数据库，新建hive数据库"><a href="#3-4：启动mysql数据库，新建hive数据库" class="headerlink" title="3.4：启动mysql数据库，新建hive数据库"></a>3.4：启动mysql数据库，新建hive数据库</h6><p><code>mysql -u root -p</code><br><code>show databases;</code></p><p>新建一个Hive数据库，这个Hive数据库与hive-site.xml文件中//localhost:3306/hive的hive对应，用来保存hive元数据信息</p><p><code>create database hive;</code></p><h6 id="3-5-配置mysql允许hive接入"><a href="#3-5-配置mysql允许hive接入" class="headerlink" title="3.5:配置mysql允许hive接入"></a>3.5:配置mysql允许hive接入</h6><p>将所有数据库的所有表的所有权限都赋给hive用户，后面的hive适配hive-site.xml中配置的连接密码</p><p><code>grant all on *.* to hive@localhost identified by 'hive';</code></p><p>刷新mysql系统权限关系表</p><p><code>flush privileges;</code></p><h6 id="3-6：启动Hive"><a href="#3-6：启动Hive" class="headerlink" title="3.6：启动Hive"></a>3.6：启动Hive</h6><p>在启动Hive之前，先启动hadoop集群，但是咱们现在装的是伪分布式的hive配置，所以先将集群改成伪分布式：</p><p>停掉之前的分布式集群</p><p>master:</p><p><code>cd /opt/hadoop-2.6.4/sbin/</code></p><p><code>./stop-all.sh</code>(封装了stop-yarn.sh和stop-dfs.sh)</p><p><code>jps</code> (保证只剩下一个jps进程)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/dfs/</span><br><span class="line">rm -rf *</span><br><span class="line">hdfs namenode -format</span><br><span class="line">cd /opt/hadoop-2.6.4/sbin/</span><br><span class="line">./start-dfs.sh</span><br></pre></td></tr></tbody></table></figure><p><code>jps</code>（查看出来NameNode，DataNode， SecondaryNameNode）</p><p><code>cd /opt/hive/bin</code></p><p>启动Hive</p><p><code>./hive</code></p><h5 id="hive常用HiveQL操作"><a href="#hive常用HiveQL操作" class="headerlink" title="hive常用HiveQL操作"></a><font color="#D2691E" size="5">hive常用HiveQL操作</font></h5><table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>创建数据库</td><td>create database if not exists hive;</td></tr><tr><td>显示hive中包含的数据库</td><td>show databases;</td></tr><tr><td>显示hive中以h开头的数据库</td><td>show databases like ‘h.*’;</td></tr><tr><td>使用hive数据库</td><td>use hive;</td></tr><tr><td>删除不包含表的数据库</td><td>drop database if exists hive;</td></tr><tr><td>删除数据库和它包含的表</td><td>drop database if exists hive cascade;</td></tr></tbody></table></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-配置伪分布式yarn：&quot;&gt;&lt;a href=&quot;#1-配置伪分布式yarn：&quot; class=&quot;headerlink&quot; title=&quot;1.配置伪分布式yarn：&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;1.配置伪分布式yarn：&lt;/font&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /opt/hadoop-2.6.4/etc/hadoop/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp mapred-site.xml.template mapred-site.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vi mapred-site.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习 Day3</title>
    <link href="https://wesukilayezcy.github.io/2019/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0-Day3/"/>
    <id>https://wesukilayezcy.github.io/2019/08/01/大数据学习-Day3/</id>
    <published>2019-08-01T03:14:00.000Z</published>
    <updated>2019-08-06T08:59:14.206Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h5 id="1-检查ip："><a href="#1-检查ip：" class="headerlink" title="1.检查ip："></a><font color="#D2691E" size="5">1.检查ip：</font></h5><p>1.每天关机之后，再次开机后，首先检查ip地址有没有发生改变（因用的动态IP）</p><p>master，slave0，slave1：<br><code>ifconfig</code></p><p>如果ip变了，修改对应三台机器的hosts文件中的IP映射</p><a id="more"></a><h5 id="2-安装JDK："><a href="#2-安装JDK：" class="headerlink" title="2.安装JDK："></a><font color="#D2691E" size="5">2.安装JDK：</font></h5><p>Master：<br><code>cd /opt/</code></p><p>借助ssh Secure Shell工具上传jdk-8u101-linux-x64.tar.gz到master的opt目录下</p><p><code>ls</code></p><p>解压缩jdk压缩包<br><code>tar -zxvf jdk-8u101-linux-x64.tar.gz</code></p><p>配置jdk环境变量<br><code>sudo vi ~/.bashrci</code><br>在文件末尾追加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.8.0_101</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></tbody></table></figure><p>esc<br><code>:wq!</code></p><p>让bashrc配置文件生效<br><code>source ~/.bashrc</code></p><p>测试环境是否配置成功：<br><code>java -version</code><br>出现版本号说明成功</p><p>slave1，slave0安装JDK</p><p>master:</p><p>远程传输命令将整个文件夹传输到slave0电脑的root用户opt目录下（-r  递归传输）</p><p><code>scp -r jdk1.8.0_101/ root@slave0:/opt/scp -r jdk1.8.0_101/ root@slave1:/opt/scp ~/.bashrc root@slave0:~/.bashrcscp ~/.bashrc root@slave1:~/.bashrc</code></p><p>slave0,slave1:<br><code>source ~/.bashrcjava -version</code></p><h5 id="3-安装hadoop："><a href="#3-安装hadoop：" class="headerlink" title="3.安装hadoop："></a><font color="#D2691E" size="5">3.安装hadoop：</font></h5><p>master：借助工具上传hadoop压缩包到指定opt目录下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">tar -zxvf hadoop-2.6.4.tar.gz</span><br><span class="line"></span><br><span class="line">cd /opt/hadoop-2.6.4/bin</span><br></pre></td></tr></tbody></table></figure><p>测试hadoop能不能使用<br><code>./hadoop version</code><br>出现版本号说明可以使用</p><p>配置环境变量：<br><code>vi ~/.bashrc</code></p><p>文件末尾追加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/hadoop-2.6.4</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br></pre></td></tr></tbody></table></figure><p>生效配置文件</p><p><code>source ~/.bashrc</code></p><p>测试hadoop命令是否变为全局命令<code>hadoop version</code></p><p>配置slave0，slave1：</p><p>Master：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">ls</span><br><span class="line">scp -r hadoop-2.6.4 root@slave0:/opt/</span><br><span class="line">scp -r hadoop-2.6.4 root@slave1:/opt/</span><br><span class="line">scp ~/.bashrc root@slave0:~/.bashrc</span><br><span class="line">scp ~/.bashrc root@slave1:~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>slave0,slave1:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">hadoop version</span><br></pre></td></tr></tbody></table></figure><h5 id="4-伪分布式搭建："><a href="#4-伪分布式搭建：" class="headerlink" title="4.伪分布式搭建："></a><font color="#D2691E" size="5">4.伪分布式搭建：</font></h5><h6 id="4-1："><a href="#4-1：" class="headerlink" title="4.1："></a>4.1：</h6><p><code>cd /opt/hadoop-2.6.4/etc/hadoop/</code></p><h5 id="4-2："><a href="#4-2：" class="headerlink" title="4.2："></a>4.2：</h5><p><code>vi core-site.xml</code></p><p>在configuration标签中间加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><property></span><br><span class="line">              <name>fs.defaultFS</name></span><br><span class="line">              <value>hdfs://master:9000</value></span><br><span class="line">      </property></span><br></pre></td></tr></tbody></table></figure><h6 id="4-3："><a href="#4-3：" class="headerlink" title="4.3："></a>4.3：</h6><p><code>vi hdfs-site.xml</code></p><p>在configuration标签中间加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><property></span><br><span class="line">              <name>dfs.replication</name></span><br><span class="line">              <value>1</value></span><br><span class="line">      </property></span><br></pre></td></tr></tbody></table></figure><h5 id="4-4-格式化分布式文件系统"><a href="#4-4-格式化分布式文件系统" class="headerlink" title="4.4:格式化分布式文件系统"></a>4.4:格式化分布式文件系统</h5><p><code>hdfs namenode -format</code></p><p>查看是否出错：status=0 说明没错，如果status=1说明出错了，出错看上面的关键词：***Exception</p><p>vi命令常用命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:set number   显示行数</span><br><span class="line"></span><br><span class="line">:22    跳转到22行</span><br></pre></td></tr></tbody></table></figure><h5 id="4-5：启动伪分布集群"><a href="#4-5：启动伪分布集群" class="headerlink" title="4.5：启动伪分布集群"></a>4.5：启动伪分布集群</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/hadoop-2.6.4/sbin/</span><br><span class="line">./start-dfs.sh</span><br></pre></td></tr></tbody></table></figure><p><code>jps</code><br>出现以下三个代表伪分布式集群启动成功</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NameNode</span><br><span class="line"></span><br><span class="line">DataNode</span><br><span class="line"></span><br><span class="line">SecondaryNameNode</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><p>在浏览器中输入：<br>192.168.31.128:50070 </p><p>查看dataNodes下是否有一个叫master的奴隶</p><hr><p>注意事项：</p><p>启动伪分布式集群之前一定保证：</p><p>1.防火墙处于关闭状态</p><p>2.检查ping  自己能否ping通（ping master）</p><p>3.无密登录登陆OK</p><p>4.Java -version</p><p>5.hadoop version</p><hr><p>失败常用解决方案：</p><ul><li>暴力点方案</li></ul><p><code>/opt/hadoop-2.6.4/sbin/stop-dfs.sh</code></p><p><code>jps</code><br>（如果出了jps进程还有其他进程，<br>用【kill -9 进程号】 强制杀死多余的进程）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/hadoop-root/dfs</span><br><span class="line">ls</span><br><span class="line">rm -rf *</span><br><span class="line">hdfs namenode -format</span><br><span class="line">/opt/hadoop-2.6.4/sbin/start-dfs.sh</span><br><span class="line">jps</span><br></pre></td></tr></tbody></table></figure><p>三个进程DataNode，NameNode，SecondaryNameNode<br>都有，说明启动成功，缺少任何一个说明失败。</p><ul><li>手动修改集群ID（clusterID）<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp/hadoop-root/dfs/name/current</span><br><span class="line">cat VERSION</span><br><span class="line">cd /tmp/hadoop-root/dfs/data/current/</span><br><span class="line">cat VERSION</span><br></pre></td></tr></tbody></table></figure></li></ul><p>匹配下两个VERSION下的clusterID是否一致，不一致可以尝试手动修改一致再启动伪分布式文件系统测试</p><h5 id="分布式文件系统常用命令："><a href="#分布式文件系统常用命令：" class="headerlink" title="分布式文件系统常用命令："></a>分布式文件系统常用命令：</h5><table><thead><tr><th>过程</th><th>说明</th></tr></thead><tbody><tr><td>hdfs dfs -mkdir /input</td><td>在分布式文件系统根目录下创建一个input目录</td></tr><tr><td>hdfs dfs -put /opt/input/test /input/</td><td>上传linux文件系统中的/opt/input/test文件到分布式文件系统的/input下</td></tr><tr><td>hdfs dfs -rm -R /output</td><td>删除分布式文件系统的/output目录</td></tr><tr><td>hdfs dfs -cat /output/pa*</td><td>查看分布式文件系统的/output下以pa开头的文件内容</td></tr><tr><td>hdfs dfs -get /jd* /opt/</td><td>下载分布式文件系统的根目录下的jd开头的压缩包文件到linux文件系统的/opt/目录下</td></tr></tbody></table></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-检查ip：&quot;&gt;&lt;a href=&quot;#1-检查ip：&quot; class=&quot;headerlink&quot; title=&quot;1.检查ip：&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#D2691E&quot; size=&quot;5&quot;&gt;1.检查ip：&lt;/font&gt;&lt;/h5&gt;&lt;p&gt;1.每天关机之后，再次开机后，首先检查ip地址有没有发生改变（因用的动态IP）&lt;/p&gt;
&lt;p&gt;master，slave0，slave1：&lt;br&gt;&lt;code&gt;ifconfig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果ip变了，修改对应三台机器的hosts文件中的IP映射&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://wesukilayezcy.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
